<?php
/**
 * PartnerApi
 * PHP version 5.
 *
 * @category Class
 *
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightWrite\Api;

use BrightWrite\ApiClient;
use BrightWrite\ApiException;

/**
 * PartnerApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class PartnerApi
{
    /**
     * API Client.
     *
     * @var \BrightWrite\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor.
     *
     * @param \BrightWrite\ApiClient|null $apiClient The api client to use
     */
    public function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.brightwrite.com/api/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client.
     *
     * @return \BrightWrite\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client.
     *
     * @param \BrightWrite\ApiClient $apiClient set the API client
     *
     * @return PartnerApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;

        return $this;
    }

    /**
     * brightwriteControllerPricingRequestCarRentalAction.
     *
     * Pricing request for a car rental policy
     *
     * @param \BrightWrite\Model\PricingRequestCarRental $pricingRequest Pricing request should contain information about quoted policy and related booking information (required)
     *
     * @return \BrightWrite\Model\PricingResponse
     *
     * @throws \BrightWrite\ApiException on non-2xx response
     */
    public function brightwriteControllerPricingRequestCarRentalAction($pricingRequest)
    {
        list($response, $statusCode, $httpHeader) = $this->brightwriteControllerPricingRequestCarRentalActionWithHttpInfo($pricingRequest);

        return $response;
    }

    /**
     * brightwriteControllerPricingRequestCarRentalActionWithHttpInfo.
     *
     * Pricing request for a car rental policy
     *
     * @param \BrightWrite\Model\PricingRequestCarRental $pricingRequest Pricing request should contain information about quoted policy and related booking information (required)
     *
     * @return array of \BrightWrite\Model\PricingResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \BrightWrite\ApiException on non-2xx response
     */
    public function brightwriteControllerPricingRequestCarRentalActionWithHttpInfo($pricingRequest)
    {
        // verify the required parameter 'pricingRequest' is set
        if ($pricingRequest === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pricingRequest when calling brightwriteControllerPricingRequestCarRentalAction');
        }

        // parse inputs
        $resourcePath = '/pricingRequestCarRental';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = ApiClient::selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($pricingRequest)) {
            $_tempBody = $pricingRequest;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BrightWrite\Model\PricingResponse'
            );

            if (!$response) {
                return [null, $statusCode, $httpHeader];
            }

            return [\BrightWrite\ObjectSerializer::deserialize($response, '\BrightWrite\Model\PricingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            case 201:
                $data = \BrightWrite\ObjectSerializer::deserialize($e->getResponseBody(), '\BrightWrite\Model\PricingResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }

            throw $e;
        }
    }

    /**
     * brightwriteControllerQuoteConversionAction.
     *
     * Pricing request for car rental business
     *
     * @param \BrightWrite\Model\QuoteConversion $conversion QuoteConversion (required)
     *
     * @throws \BrightWrite\ApiException on non-2xx response
     */
    public function brightwriteControllerQuoteConversionAction($conversion)
    {
        list($response, $statusCode, $httpHeader) = $this->brightwriteControllerQuoteConversionActionWithHttpInfo($conversion);

        return $response;
    }

    /**
     * brightwriteControllerQuoteConversionActionWithHttpInfo.
     *
     * Pricing request for car rental business
     *
     * @param \BrightWrite\Model\QuoteConversion $conversion QuoteConversion (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \BrightWrite\ApiException on non-2xx response
     */
    public function brightwriteControllerQuoteConversionActionWithHttpInfo($conversion)
    {
        // verify the required parameter 'conversion' is set
        if ($conversion === null) {
            throw new \InvalidArgumentException('Missing the required parameter $conversion when calling brightwriteControllerQuoteConversionAction');
        }

        // parse inputs
        $resourcePath = '/quoteConversion';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = ApiClient::selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($conversion)) {
            $_tempBody = $conversion;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
