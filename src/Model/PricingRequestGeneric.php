<?php
/**
 * PricingRequestGeneric
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightWrite
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BrightWriteâ„¢
 *
 * BrightWrite API
 *
 * OpenAPI spec version: 0.1.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightWrite\Model;

use \ArrayAccess;

/**
 * PricingRequestGeneric Class Doc Comment
 *
 * @category    Class */
/**
 * @package     BrightWrite
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PricingRequestGeneric implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PricingRequestGeneric';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'partnerPrimaryInsuredId' => 'string',
        'partnerQuoteId' => 'string',
        'effectiveDateTime' => '\DateTime',
        'requestDateTime' => '\DateTime',
        'expirationDateTime' => '\DateTime',
        'currency' => 'string',
        'insuredPersons' => '\BrightWrite\Model\InsuredPerson[]',
        'partnerId' => 'string',
        'pricingRequestOrigin' => 'string',
        'partnerPrice' => 'double',
        'purchaser' => '\BrightWrite\Model\Purchaser'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'partnerPrimaryInsuredId' => 'partnerPrimaryInsuredId',
        'partnerQuoteId' => 'partnerQuoteId',
        'effectiveDateTime' => 'effectiveDateTime',
        'requestDateTime' => 'requestDateTime',
        'expirationDateTime' => 'expirationDateTime',
        'currency' => 'currency',
        'insuredPersons' => 'insuredPersons',
        'partnerId' => 'partnerId',
        'pricingRequestOrigin' => 'pricingRequestOrigin',
        'partnerPrice' => 'partnerPrice',
        'purchaser' => 'purchaser'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'partnerPrimaryInsuredId' => 'setPartnerPrimaryInsuredId',
        'partnerQuoteId' => 'setPartnerQuoteId',
        'effectiveDateTime' => 'setEffectiveDateTime',
        'requestDateTime' => 'setRequestDateTime',
        'expirationDateTime' => 'setExpirationDateTime',
        'currency' => 'setCurrency',
        'insuredPersons' => 'setInsuredPersons',
        'partnerId' => 'setPartnerId',
        'pricingRequestOrigin' => 'setPricingRequestOrigin',
        'partnerPrice' => 'setPartnerPrice',
        'purchaser' => 'setPurchaser'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'partnerPrimaryInsuredId' => 'getPartnerPrimaryInsuredId',
        'partnerQuoteId' => 'getPartnerQuoteId',
        'effectiveDateTime' => 'getEffectiveDateTime',
        'requestDateTime' => 'getRequestDateTime',
        'expirationDateTime' => 'getExpirationDateTime',
        'currency' => 'getCurrency',
        'insuredPersons' => 'getInsuredPersons',
        'partnerId' => 'getPartnerId',
        'pricingRequestOrigin' => 'getPricingRequestOrigin',
        'partnerPrice' => 'getPartnerPrice',
        'purchaser' => 'getPurchaser'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['partnerPrimaryInsuredId'] = isset($data['partnerPrimaryInsuredId']) ? $data['partnerPrimaryInsuredId'] : null;
        $this->container['partnerQuoteId'] = isset($data['partnerQuoteId']) ? $data['partnerQuoteId'] : null;
        $this->container['effectiveDateTime'] = isset($data['effectiveDateTime']) ? $data['effectiveDateTime'] : null;
        $this->container['requestDateTime'] = isset($data['requestDateTime']) ? $data['requestDateTime'] : null;
        $this->container['expirationDateTime'] = isset($data['expirationDateTime']) ? $data['expirationDateTime'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['insuredPersons'] = isset($data['insuredPersons']) ? $data['insuredPersons'] : null;
        $this->container['partnerId'] = isset($data['partnerId']) ? $data['partnerId'] : null;
        $this->container['pricingRequestOrigin'] = isset($data['pricingRequestOrigin']) ? $data['pricingRequestOrigin'] : null;
        $this->container['partnerPrice'] = isset($data['partnerPrice']) ? $data['partnerPrice'] : null;
        $this->container['purchaser'] = isset($data['purchaser']) ? $data['purchaser'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['partnerPrimaryInsuredId']) && (strlen($this->container['partnerPrimaryInsuredId']) > 128)) {
            $invalid_properties[] = "invalid value for 'partnerPrimaryInsuredId', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['partnerPrimaryInsuredId']) && (strlen($this->container['partnerPrimaryInsuredId']) < 2)) {
            $invalid_properties[] = "invalid value for 'partnerPrimaryInsuredId', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['partnerQuoteId']) && (strlen($this->container['partnerQuoteId']) > 64)) {
            $invalid_properties[] = "invalid value for 'partnerQuoteId', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['partnerQuoteId']) && (strlen($this->container['partnerQuoteId']) < 2)) {
            $invalid_properties[] = "invalid value for 'partnerQuoteId', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['effectiveDateTime'] === null) {
            $invalid_properties[] = "'effectiveDateTime' can't be null";
        }
        if ($this->container['requestDateTime'] === null) {
            $invalid_properties[] = "'requestDateTime' can't be null";
        }
        if ($this->container['expirationDateTime'] === null) {
            $invalid_properties[] = "'expirationDateTime' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalid_properties[] = "'currency' can't be null";
        }
        if ((strlen($this->container['currency']) > 3)) {
            $invalid_properties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if ((strlen($this->container['currency']) < 3)) {
            $invalid_properties[] = "invalid value for 'currency', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['insuredPersons'] === null) {
            $invalid_properties[] = "'insuredPersons' can't be null";
        }
        if ($this->container['partnerId'] === null) {
            $invalid_properties[] = "'partnerId' can't be null";
        }
        if ((strlen($this->container['partnerId']) > 64)) {
            $invalid_properties[] = "invalid value for 'partnerId', the character length must be smaller than or equal to 64.";
        }

        if ((strlen($this->container['partnerId']) < 2)) {
            $invalid_properties[] = "invalid value for 'partnerId', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['pricingRequestOrigin']) && (strlen($this->container['pricingRequestOrigin']) > 64)) {
            $invalid_properties[] = "invalid value for 'pricingRequestOrigin', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['pricingRequestOrigin']) && (strlen($this->container['pricingRequestOrigin']) < 1)) {
            $invalid_properties[] = "invalid value for 'pricingRequestOrigin', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['partnerPrice'] === null) {
            $invalid_properties[] = "'partnerPrice' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['partnerPrimaryInsuredId']) > 128) {
            return false;
        }
        if (strlen($this->container['partnerPrimaryInsuredId']) < 2) {
            return false;
        }
        if (strlen($this->container['partnerQuoteId']) > 64) {
            return false;
        }
        if (strlen($this->container['partnerQuoteId']) < 2) {
            return false;
        }
        if ($this->container['effectiveDateTime'] === null) {
            return false;
        }
        if ($this->container['requestDateTime'] === null) {
            return false;
        }
        if ($this->container['expirationDateTime'] === null) {
            return false;
        }
        if ($this->container['currency'] === null) {
            return false;
        }
        if (strlen($this->container['currency']) > 3) {
            return false;
        }
        if (strlen($this->container['currency']) < 3) {
            return false;
        }
        if ($this->container['insuredPersons'] === null) {
            return false;
        }
        if ($this->container['partnerId'] === null) {
            return false;
        }
        if (strlen($this->container['partnerId']) > 64) {
            return false;
        }
        if (strlen($this->container['partnerId']) < 2) {
            return false;
        }
        if (strlen($this->container['pricingRequestOrigin']) > 64) {
            return false;
        }
        if (strlen($this->container['pricingRequestOrigin']) < 1) {
            return false;
        }
        if ($this->container['partnerPrice'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets partnerPrimaryInsuredId
     * @return string
     */
    public function getPartnerPrimaryInsuredId()
    {
        return $this->container['partnerPrimaryInsuredId'];
    }

    /**
     * Sets partnerPrimaryInsuredId
     * @param string $partnerPrimaryInsuredId Insured Person ID of the policy holder
     * @return $this
     */
    public function setPartnerPrimaryInsuredId($partnerPrimaryInsuredId)
    {
        if (!is_null($partnerPrimaryInsuredId) && (strlen($partnerPrimaryInsuredId) > 128)) {
            throw new \InvalidArgumentException('invalid length for $partnerPrimaryInsuredId when calling PricingRequestGeneric., must be smaller than or equal to 128.');
        }
        if (!is_null($partnerPrimaryInsuredId) && (strlen($partnerPrimaryInsuredId) < 2)) {
            throw new \InvalidArgumentException('invalid length for $partnerPrimaryInsuredId when calling PricingRequestGeneric., must be bigger than or equal to 2.');
        }

        $this->container['partnerPrimaryInsuredId'] = $partnerPrimaryInsuredId;

        return $this;
    }

    /**
     * Gets partnerQuoteId
     * @return string
     */
    public function getPartnerQuoteId()
    {
        return $this->container['partnerQuoteId'];
    }

    /**
     * Sets partnerQuoteId
     * @param string $partnerQuoteId Quote identifier in partner's database
     * @return $this
     */
    public function setPartnerQuoteId($partnerQuoteId)
    {
        if (!is_null($partnerQuoteId) && (strlen($partnerQuoteId) > 64)) {
            throw new \InvalidArgumentException('invalid length for $partnerQuoteId when calling PricingRequestGeneric., must be smaller than or equal to 64.');
        }
        if (!is_null($partnerQuoteId) && (strlen($partnerQuoteId) < 2)) {
            throw new \InvalidArgumentException('invalid length for $partnerQuoteId when calling PricingRequestGeneric., must be bigger than or equal to 2.');
        }

        $this->container['partnerQuoteId'] = $partnerQuoteId;

        return $this;
    }

    /**
     * Gets effectiveDateTime
     * @return \DateTime
     */
    public function getEffectiveDateTime()
    {
        return $this->container['effectiveDateTime'];
    }

    /**
     * Sets effectiveDateTime
     * @param \DateTime $effectiveDateTime Effective date and time for the policy (use 00:00:00 time if coverage starts beginning of day)
     * @return $this
     */
    public function setEffectiveDateTime($effectiveDateTime)
    {
        $this->container['effectiveDateTime'] = $effectiveDateTime;

        return $this;
    }

    /**
     * Gets requestDateTime
     * @return \DateTime
     */
    public function getRequestDateTime()
    {
        return $this->container['requestDateTime'];
    }

    /**
     * Sets requestDateTime
     * @param \DateTime $requestDateTime Timestamp of the quote request when it was first received by the distributor
     * @return $this
     */
    public function setRequestDateTime($requestDateTime)
    {
        $this->container['requestDateTime'] = $requestDateTime;

        return $this;
    }

    /**
     * Gets expirationDateTime
     * @return \DateTime
     */
    public function getExpirationDateTime()
    {
        return $this->container['expirationDateTime'];
    }

    /**
     * Sets expirationDateTime
     * @param \DateTime $expirationDateTime Expiration date and time of the policy (use 23:59:59 if date is inclusive OR 00:00:00 time of next day if date is exclusive.
     * @return $this
     */
    public function setExpirationDateTime($expirationDateTime)
    {
        $this->container['expirationDateTime'] = $expirationDateTime;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency Currency used. Three character ISO 4217
     * @return $this
     */
    public function setCurrency($currency)
    {
        if ((strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling PricingRequestGeneric., must be smaller than or equal to 3.');
        }
        if ((strlen($currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling PricingRequestGeneric., must be bigger than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets insuredPersons
     * @return \BrightWrite\Model\InsuredPerson[]
     */
    public function getInsuredPersons()
    {
        return $this->container['insuredPersons'];
    }

    /**
     * Sets insuredPersons
     * @param \BrightWrite\Model\InsuredPerson[] $insuredPersons List of people who are insured/covered by this policy
     * @return $this
     */
    public function setInsuredPersons($insuredPersons)
    {
        $this->container['insuredPersons'] = $insuredPersons;

        return $this;
    }

    /**
     * Gets partnerId
     * @return string
     */
    public function getPartnerId()
    {
        return $this->container['partnerId'];
    }

    /**
     * Sets partnerId
     * @param string $partnerId Partner identifier. Human and machine readable so we can use in tagging
     * @return $this
     */
    public function setPartnerId($partnerId)
    {
        if ((strlen($partnerId) > 64)) {
            throw new \InvalidArgumentException('invalid length for $partnerId when calling PricingRequestGeneric., must be smaller than or equal to 64.');
        }
        if ((strlen($partnerId) < 2)) {
            throw new \InvalidArgumentException('invalid length for $partnerId when calling PricingRequestGeneric., must be bigger than or equal to 2.');
        }

        $this->container['partnerId'] = $partnerId;

        return $this;
    }

    /**
     * Gets pricingRequestOrigin
     * @return string
     */
    public function getPricingRequestOrigin()
    {
        return $this->container['pricingRequestOrigin'];
    }

    /**
     * Sets pricingRequestOrigin
     * @param string $pricingRequestOrigin Identifier, which partner use to specify pricing request origin
     * @return $this
     */
    public function setPricingRequestOrigin($pricingRequestOrigin)
    {
        if (!is_null($pricingRequestOrigin) && (strlen($pricingRequestOrigin) > 64)) {
            throw new \InvalidArgumentException('invalid length for $pricingRequestOrigin when calling PricingRequestGeneric., must be smaller than or equal to 64.');
        }
        if (!is_null($pricingRequestOrigin) && (strlen($pricingRequestOrigin) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pricingRequestOrigin when calling PricingRequestGeneric., must be bigger than or equal to 1.');
        }

        $this->container['pricingRequestOrigin'] = $pricingRequestOrigin;

        return $this;
    }

    /**
     * Gets partnerPrice
     * @return double
     */
    public function getPartnerPrice()
    {
        return $this->container['partnerPrice'];
    }

    /**
     * Sets partnerPrice
     * @param double $partnerPrice The price above which the insurance must be sold if the book is to be profitable
     * @return $this
     */
    public function setPartnerPrice($partnerPrice)
    {
        $this->container['partnerPrice'] = $partnerPrice;

        return $this;
    }

    /**
     * Gets purchaser
     * @return \BrightWrite\Model\Purchaser
     */
    public function getPurchaser()
    {
        return $this->container['purchaser'];
    }

    /**
     * Sets purchaser
     * @param \BrightWrite\Model\Purchaser $purchaser
     * @return $this
     */
    public function setPurchaser($purchaser)
    {
        $this->container['purchaser'] = $purchaser;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this));
    }
}
