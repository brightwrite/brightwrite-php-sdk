<?php
/**
 * PricingRequestGeneric
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightWrite
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightWrite\Model;

use \ArrayAccess;
/**
 * PricingRequestGeneric Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     BrightWrite
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PricingRequestGeneric implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'partnerPrimaryInsuredId' => 'string',
        'partnerQuoteId' => 'string',
        'effectiveDateTime' => '\DateTime',
        'requestDateTime' => '\DateTime',
        'expirationDateTime' => '\DateTime',
        'currency' => 'string',
        'insuredPersons' => '\BrightWrite\Model\InsuredPerson[]',
        'partnerId' => 'string',
        'pricingRequestOrigin' => 'string',
        'partnerPrice' => 'double',
        'appId' => 'string',
        'appEnv' => 'string',
        'purchaser' => '\BrightWrite\Model\Purchaser',
        'brightwriteCookieId' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'partnerPrimaryInsuredId' => 'partnerPrimaryInsuredId',
        'partnerQuoteId' => 'partnerQuoteId',
        'effectiveDateTime' => 'effectiveDateTime',
        'requestDateTime' => 'requestDateTime',
        'expirationDateTime' => 'expirationDateTime',
        'currency' => 'currency',
        'insuredPersons' => 'insuredPersons',
        'partnerId' => 'partnerId',
        'pricingRequestOrigin' => 'pricingRequestOrigin',
        'partnerPrice' => 'partnerPrice',
        'appId' => 'appId',
        'appEnv' => 'appEnv',
        'purchaser' => 'purchaser',
        'brightwriteCookieId' => 'brightwriteCookieId'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'partnerPrimaryInsuredId' => 'setPartnerPrimaryInsuredId',
        'partnerQuoteId' => 'setPartnerQuoteId',
        'effectiveDateTime' => 'setEffectiveDateTime',
        'requestDateTime' => 'setRequestDateTime',
        'expirationDateTime' => 'setExpirationDateTime',
        'currency' => 'setCurrency',
        'insuredPersons' => 'setInsuredPersons',
        'partnerId' => 'setPartnerId',
        'pricingRequestOrigin' => 'setPricingRequestOrigin',
        'partnerPrice' => 'setPartnerPrice',
        'appId' => 'setAppId',
        'appEnv' => 'setAppEnv',
        'purchaser' => 'setPurchaser',
        'brightwriteCookieId' => 'setBrightwriteCookieId'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'partnerPrimaryInsuredId' => 'getPartnerPrimaryInsuredId',
        'partnerQuoteId' => 'getPartnerQuoteId',
        'effectiveDateTime' => 'getEffectiveDateTime',
        'requestDateTime' => 'getRequestDateTime',
        'expirationDateTime' => 'getExpirationDateTime',
        'currency' => 'getCurrency',
        'insuredPersons' => 'getInsuredPersons',
        'partnerId' => 'getPartnerId',
        'pricingRequestOrigin' => 'getPricingRequestOrigin',
        'partnerPrice' => 'getPartnerPrice',
        'appId' => 'getAppId',
        'appEnv' => 'getAppEnv',
        'purchaser' => 'getPurchaser',
        'brightwriteCookieId' => 'getBrightwriteCookieId'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $partnerPrimaryInsuredId Insured Person ID of the policy holder
      * @var string
      */
    protected $partnerPrimaryInsuredId;
    
    /**
      * $partnerQuoteId Quote identifier in partner's database
      * @var string
      */
    protected $partnerQuoteId;
    
    /**
      * $effectiveDateTime Effective date and time for the policy (use 00:00:00 time if coverage starts beginning of day)
      * @var \DateTime
      */
    protected $effectiveDateTime;
    
    /**
      * $requestDateTime Timestamp of the quote request when it was first received by the distributor
      * @var \DateTime
      */
    protected $requestDateTime;
    
    /**
      * $expirationDateTime Expiration date and time of the policy (use 23:59:59 if date is inclusive OR 00:00:00 time of next day if date is exclusive.
      * @var \DateTime
      */
    protected $expirationDateTime;
    
    /**
      * $currency Currency used. Three character ISO 4217
      * @var string
      */
    protected $currency;
    
    /**
      * $insuredPersons List of people who are insured/covered by this policy
      * @var \BrightWrite\Model\InsuredPerson[]
      */
    protected $insuredPersons;
    
    /**
      * $partnerId Partner identifier. Human and machine readable so we can use in tagging
      * @var string
      */
    protected $partnerId;
    
    /**
      * $pricingRequestOrigin Identifier, which partner use to specify pricing request origin
      * @var string
      */
    protected $pricingRequestOrigin;
    
    /**
      * $partnerPrice The price above which the insurance must be sold if the book is to be profitable
      * @var double
      */
    protected $partnerPrice;
    
    /**
      * $appId Optinal field to identify source of traffic. For example website name or mobile app identifier.
      * @var string
      */
    protected $appId;
    
    /**
      * $appEnv Optinal field which can be used to distinguish production and staging or any other test environments which partners can use as part of their processes.
      * @var string
      */
    protected $appEnv;
    
    /**
      * $purchaser 
      * @var \BrightWrite\Model\Purchaser
      */
    protected $purchaser;
    
    /**
      * $brightwriteCookieId BrightWrite cookie identifier
      * @var string
      */
    protected $brightwriteCookieId;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->partnerPrimaryInsuredId = $data["partnerPrimaryInsuredId"];
            $this->partnerQuoteId = $data["partnerQuoteId"];
            $this->effectiveDateTime = $data["effectiveDateTime"];
            $this->requestDateTime = $data["requestDateTime"];
            $this->expirationDateTime = $data["expirationDateTime"];
            $this->currency = $data["currency"];
            $this->insuredPersons = $data["insuredPersons"];
            $this->partnerId = $data["partnerId"];
            $this->pricingRequestOrigin = $data["pricingRequestOrigin"];
            $this->partnerPrice = $data["partnerPrice"];
            $this->appId = $data["appId"];
            $this->appEnv = $data["appEnv"];
            $this->purchaser = $data["purchaser"];
            $this->brightwriteCookieId = $data["brightwriteCookieId"];
        }
    }
    
    /**
     * Gets partnerPrimaryInsuredId
     * @return string
     */
    public function getPartnerPrimaryInsuredId()
    {
        return $this->partnerPrimaryInsuredId;
    }
  
    /**
     * Sets partnerPrimaryInsuredId
     * @param string $partnerPrimaryInsuredId Insured Person ID of the policy holder
     * @return $this
     */
    public function setPartnerPrimaryInsuredId($partnerPrimaryInsuredId)
    {
        
        $this->partnerPrimaryInsuredId = $partnerPrimaryInsuredId;
        return $this;
    }
    
    /**
     * Gets partnerQuoteId
     * @return string
     */
    public function getPartnerQuoteId()
    {
        return $this->partnerQuoteId;
    }
  
    /**
     * Sets partnerQuoteId
     * @param string $partnerQuoteId Quote identifier in partner's database
     * @return $this
     */
    public function setPartnerQuoteId($partnerQuoteId)
    {
        
        $this->partnerQuoteId = $partnerQuoteId;
        return $this;
    }
    
    /**
     * Gets effectiveDateTime
     * @return \DateTime
     */
    public function getEffectiveDateTime()
    {
        return $this->effectiveDateTime;
    }
  
    /**
     * Sets effectiveDateTime
     * @param \DateTime $effectiveDateTime Effective date and time for the policy (use 00:00:00 time if coverage starts beginning of day)
     * @return $this
     */
    public function setEffectiveDateTime($effectiveDateTime)
    {
        
        $this->effectiveDateTime = $effectiveDateTime;
        return $this;
    }
    
    /**
     * Gets requestDateTime
     * @return \DateTime
     */
    public function getRequestDateTime()
    {
        return $this->requestDateTime;
    }
  
    /**
     * Sets requestDateTime
     * @param \DateTime $requestDateTime Timestamp of the quote request when it was first received by the distributor
     * @return $this
     */
    public function setRequestDateTime($requestDateTime)
    {
        
        $this->requestDateTime = $requestDateTime;
        return $this;
    }
    
    /**
     * Gets expirationDateTime
     * @return \DateTime
     */
    public function getExpirationDateTime()
    {
        return $this->expirationDateTime;
    }
  
    /**
     * Sets expirationDateTime
     * @param \DateTime $expirationDateTime Expiration date and time of the policy (use 23:59:59 if date is inclusive OR 00:00:00 time of next day if date is exclusive.
     * @return $this
     */
    public function setExpirationDateTime($expirationDateTime)
    {
        
        $this->expirationDateTime = $expirationDateTime;
        return $this;
    }
    
    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }
  
    /**
     * Sets currency
     * @param string $currency Currency used. Three character ISO 4217
     * @return $this
     */
    public function setCurrency($currency)
    {
        
        $this->currency = $currency;
        return $this;
    }
    
    /**
     * Gets insuredPersons
     * @return \BrightWrite\Model\InsuredPerson[]
     */
    public function getInsuredPersons()
    {
        return $this->insuredPersons;
    }
  
    /**
     * Sets insuredPersons
     * @param \BrightWrite\Model\InsuredPerson[] $insuredPersons List of people who are insured/covered by this policy
     * @return $this
     */
    public function setInsuredPersons($insuredPersons)
    {
        
        $this->insuredPersons = $insuredPersons;
        return $this;
    }
    
    /**
     * Gets partnerId
     * @return string
     */
    public function getPartnerId()
    {
        return $this->partnerId;
    }
  
    /**
     * Sets partnerId
     * @param string $partnerId Partner identifier. Human and machine readable so we can use in tagging
     * @return $this
     */
    public function setPartnerId($partnerId)
    {
        
        $this->partnerId = $partnerId;
        return $this;
    }
    
    /**
     * Gets pricingRequestOrigin
     * @return string
     */
    public function getPricingRequestOrigin()
    {
        return $this->pricingRequestOrigin;
    }
  
    /**
     * Sets pricingRequestOrigin
     * @param string $pricingRequestOrigin Identifier, which partner use to specify pricing request origin
     * @return $this
     */
    public function setPricingRequestOrigin($pricingRequestOrigin)
    {
        
        $this->pricingRequestOrigin = $pricingRequestOrigin;
        return $this;
    }
    
    /**
     * Gets partnerPrice
     * @return double
     */
    public function getPartnerPrice()
    {
        return $this->partnerPrice;
    }
  
    /**
     * Sets partnerPrice
     * @param double $partnerPrice The price above which the insurance must be sold if the book is to be profitable
     * @return $this
     */
    public function setPartnerPrice($partnerPrice)
    {
        
        $this->partnerPrice = $partnerPrice;
        return $this;
    }
    
    /**
     * Gets appId
     * @return string
     */
    public function getAppId()
    {
        return $this->appId;
    }
  
    /**
     * Sets appId
     * @param string $appId Optinal field to identify source of traffic. For example website name or mobile app identifier.
     * @return $this
     */
    public function setAppId($appId)
    {
        
        $this->appId = $appId;
        return $this;
    }
    
    /**
     * Gets appEnv
     * @return string
     */
    public function getAppEnv()
    {
        return $this->appEnv;
    }
  
    /**
     * Sets appEnv
     * @param string $appEnv Optinal field which can be used to distinguish production and staging or any other test environments which partners can use as part of their processes.
     * @return $this
     */
    public function setAppEnv($appEnv)
    {
        
        $this->appEnv = $appEnv;
        return $this;
    }
    
    /**
     * Gets purchaser
     * @return \BrightWrite\Model\Purchaser
     */
    public function getPurchaser()
    {
        return $this->purchaser;
    }
  
    /**
     * Sets purchaser
     * @param \BrightWrite\Model\Purchaser $purchaser 
     * @return $this
     */
    public function setPurchaser($purchaser)
    {
        
        $this->purchaser = $purchaser;
        return $this;
    }
    
    /**
     * Gets brightwriteCookieId
     * @return string
     */
    public function getBrightwriteCookieId()
    {
        return $this->brightwriteCookieId;
    }
  
    /**
     * Sets brightwriteCookieId
     * @param string $brightwriteCookieId BrightWrite cookie identifier
     * @return $this
     */
    public function setBrightwriteCookieId($brightwriteCookieId)
    {
        
        $this->brightwriteCookieId = $brightwriteCookieId;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
