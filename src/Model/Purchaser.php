<?php
/**
 * Purchaser.
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightWrite\Model;

use ArrayAccess;

/**
 * Purchaser Class Doc Comment.
 *
 * @category    Class
 * @description
 *
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 *
 * @see        https://github.com/swagger-api/swagger-codegen
 */
class Purchaser implements ArrayAccess
{
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    public static $swaggerTypes = [
        'customerId' => 'string',
        'partnerInsuredPersonId' => 'string',
        'countryOfResidence' => 'string',
        'billingPostalCode' => 'string',
        'firstName' => 'string',
        'primaryLastName' => 'string',
        'secondaryLastName' => 'string',
        'name' => 'string',
        'ipAddress' => 'string',
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name.
     *
     * @var string[]
     */
    public static $attributeMap = [
        'customerId' => 'customerId',
        'partnerInsuredPersonId' => 'partnerInsuredPersonId',
        'countryOfResidence' => 'countryOfResidence',
        'billingPostalCode' => 'billingPostalCode',
        'firstName' => 'firstName',
        'primaryLastName' => 'primaryLastName',
        'secondaryLastName' => 'secondaryLastName',
        'name' => 'name',
        'ipAddress' => 'ipAddress',
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    public static $setters = [
        'customerId' => 'setCustomerId',
        'partnerInsuredPersonId' => 'setPartnerInsuredPersonId',
        'countryOfResidence' => 'setCountryOfResidence',
        'billingPostalCode' => 'setBillingPostalCode',
        'firstName' => 'setFirstName',
        'primaryLastName' => 'setPrimaryLastName',
        'secondaryLastName' => 'setSecondaryLastName',
        'name' => 'setName',
        'ipAddress' => 'setIpAddress',
    ];

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    public static $getters = [
        'customerId' => 'getCustomerId',
        'partnerInsuredPersonId' => 'getPartnerInsuredPersonId',
        'countryOfResidence' => 'getCountryOfResidence',
        'billingPostalCode' => 'getBillingPostalCode',
        'firstName' => 'getFirstName',
        'primaryLastName' => 'getPrimaryLastName',
        'secondaryLastName' => 'getSecondaryLastName',
        'name' => 'getName',
        'ipAddress' => 'getIpAddress',
    ];

    public static function getters()
    {
        return self::$getters;
    }

    /**
     * $customerId Customer identifier as it appears in partner platform.
     *
     * @var string
     */
    protected $customerId;

    /**
     * $partnerInsuredPersonId If the purchaser is also an Insured person, i.e. buying policy for his/herself.
     *
     * @var string
     */
    protected $partnerInsuredPersonId;

    /**
     * $countryOfResidence Two character standard (ISO 3166). It's only required if the purchaser is not an Insured Person.
     *
     * @var string
     */
    protected $countryOfResidence;

    /**
     * $billingPostalCode Collect this regardless of whether the purchaser is also an insured person.
     *
     * @var string
     */
    protected $billingPostalCode;

    /**
     * $firstName Given name, e.g. first name of a person in US. This can be used along with familyName instead of the name property. Only required if the purchaser is not an Insured Person.
     *
     * @var string
     */
    protected $firstName;

    /**
     * $primaryLastName Family name. Only required if the purchaser is not an Insured Person.
     *
     * @var string
     */
    protected $primaryLastName;

    /**
     * $secondaryLastName An additional last name for a person e.g. Spanish names have two last names. Only required if the purchaser is not an Insured Person.
     *
     * @var string
     */
    protected $secondaryLastName;

    /**
     * $name Full name of a person. Can be send instead of combination of firstName, lastName.
     *
     * @var string
     */
    protected $name;

    /**
     * $ipAddress Client IP Address.
     *
     * @var string
     */
    protected $ipAddress;

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->customerId = $data['customerId'];
            $this->partnerInsuredPersonId = $data['partnerInsuredPersonId'];
            $this->countryOfResidence = $data['countryOfResidence'];
            $this->billingPostalCode = $data['billingPostalCode'];
            $this->firstName = $data['firstName'];
            $this->primaryLastName = $data['primaryLastName'];
            $this->secondaryLastName = $data['secondaryLastName'];
            $this->name = $data['name'];
            $this->ipAddress = $data['ipAddress'];
        }
    }

    /**
     * Gets customerId.
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->customerId;
    }

    /**
     * Sets customerId.
     *
     * @param string $customerId Customer identifier as it appears in partner platform
     *
     * @return $this
     */
    public function setCustomerId($customerId)
    {
        $this->customerId = $customerId;

        return $this;
    }

    /**
     * Gets partnerInsuredPersonId.
     *
     * @return string
     */
    public function getPartnerInsuredPersonId()
    {
        return $this->partnerInsuredPersonId;
    }

    /**
     * Sets partnerInsuredPersonId.
     *
     * @param string $partnerInsuredPersonId If the purchaser is also an Insured person, i.e. buying policy for his/herself
     *
     * @return $this
     */
    public function setPartnerInsuredPersonId($partnerInsuredPersonId)
    {
        $this->partnerInsuredPersonId = $partnerInsuredPersonId;

        return $this;
    }

    /**
     * Gets countryOfResidence.
     *
     * @return string
     */
    public function getCountryOfResidence()
    {
        return $this->countryOfResidence;
    }

    /**
     * Sets countryOfResidence.
     *
     * @param string $countryOfResidence Two character standard (ISO 3166). It's only required if the purchaser is not an Insured Person
     *
     * @return $this
     */
    public function setCountryOfResidence($countryOfResidence)
    {
        $this->countryOfResidence = $countryOfResidence;

        return $this;
    }

    /**
     * Gets billingPostalCode.
     *
     * @return string
     */
    public function getBillingPostalCode()
    {
        return $this->billingPostalCode;
    }

    /**
     * Sets billingPostalCode.
     *
     * @param string $billingPostalCode Collect this regardless of whether the purchaser is also an insured person
     *
     * @return $this
     */
    public function setBillingPostalCode($billingPostalCode)
    {
        $this->billingPostalCode = $billingPostalCode;

        return $this;
    }

    /**
     * Gets firstName.
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * Sets firstName.
     *
     * @param string $firstName Given name, e.g. first name of a person in US. This can be used along with familyName instead of the name property. Only required if the purchaser is not an Insured Person
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->firstName = $firstName;

        return $this;
    }

    /**
     * Gets primaryLastName.
     *
     * @return string
     */
    public function getPrimaryLastName()
    {
        return $this->primaryLastName;
    }

    /**
     * Sets primaryLastName.
     *
     * @param string $primaryLastName Family name. Only required if the purchaser is not an Insured Person
     *
     * @return $this
     */
    public function setPrimaryLastName($primaryLastName)
    {
        $this->primaryLastName = $primaryLastName;

        return $this;
    }

    /**
     * Gets secondaryLastName.
     *
     * @return string
     */
    public function getSecondaryLastName()
    {
        return $this->secondaryLastName;
    }

    /**
     * Sets secondaryLastName.
     *
     * @param string $secondaryLastName An additional last name for a person e.g. Spanish names have two last names. Only required if the purchaser is not an Insured Person
     *
     * @return $this
     */
    public function setSecondaryLastName($secondaryLastName)
    {
        $this->secondaryLastName = $secondaryLastName;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string $name Full name of a person. Can be send instead of combination of firstName, lastName
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets ipAddress.
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->ipAddress;
    }

    /**
     * Sets ipAddress.
     *
     * @param string $ipAddress Client IP Address
     *
     * @return $this
     */
    public function setIpAddress($ipAddress)
    {
        $this->ipAddress = $ipAddress;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
