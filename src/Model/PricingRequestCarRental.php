<?php
/**
 * PricingRequestCarRental
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightWrite
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BrightWriteâ„¢
 *
 * BrightWrite API
 *
 * OpenAPI spec version: 0.1.7
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightWrite\Model;

use \ArrayAccess;

/**
 * PricingRequestCarRental Class Doc Comment
 *
 * @category    Class
 * @package     BrightWrite
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PricingRequestCarRental implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PricingRequestCarRental';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'partnerPrimaryInsuredId' => 'string',
        'partnerQuoteId' => 'string',
        'effectiveDateTime' => '\DateTime',
        'requestDateTime' => '\DateTime',
        'expirationDateTime' => '\DateTime',
        'currency' => 'string',
        'insuredPersons' => '\BrightWrite\Model\InsuredPerson[]',
        'partnerId' => 'string',
        'pricingRequestOrigin' => 'string',
        'partnerPrice' => 'double',
        'appId' => 'string',
        'appEnv' => 'string',
        'purchaser' => '\BrightWrite\Model\Purchaser',
        'brightwriteCookieId' => 'string',
        'policyDestinationCountryCode' => 'string',
        'policyType' => 'string',
        'requestedLiability' => 'double',
        'policyExcess' => 'double',
        'policyLiability' => 'double',
        'currencyForExcessAndLiability' => 'string',
        'rentalCarBooking' => '\BrightWrite\Model\BookingRentalCar'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'partnerPrimaryInsuredId' => null,
        'partnerQuoteId' => null,
        'effectiveDateTime' => 'date-time',
        'requestDateTime' => 'date-time',
        'expirationDateTime' => 'date-time',
        'currency' => null,
        'insuredPersons' => null,
        'partnerId' => null,
        'pricingRequestOrigin' => null,
        'partnerPrice' => 'double',
        'appId' => null,
        'appEnv' => null,
        'purchaser' => null,
        'brightwriteCookieId' => null,
        'policyDestinationCountryCode' => null,
        'policyType' => null,
        'requestedLiability' => 'double',
        'policyExcess' => 'double',
        'policyLiability' => 'double',
        'currencyForExcessAndLiability' => null,
        'rentalCarBooking' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'partnerPrimaryInsuredId' => 'partnerPrimaryInsuredId',
        'partnerQuoteId' => 'partnerQuoteId',
        'effectiveDateTime' => 'effectiveDateTime',
        'requestDateTime' => 'requestDateTime',
        'expirationDateTime' => 'expirationDateTime',
        'currency' => 'currency',
        'insuredPersons' => 'insuredPersons',
        'partnerId' => 'partnerId',
        'pricingRequestOrigin' => 'pricingRequestOrigin',
        'partnerPrice' => 'partnerPrice',
        'appId' => 'appId',
        'appEnv' => 'appEnv',
        'purchaser' => 'purchaser',
        'brightwriteCookieId' => 'brightwriteCookieId',
        'policyDestinationCountryCode' => 'policyDestinationCountryCode',
        'policyType' => 'policyType',
        'requestedLiability' => 'requestedLiability',
        'policyExcess' => 'policyExcess',
        'policyLiability' => 'policyLiability',
        'currencyForExcessAndLiability' => 'currencyForExcessAndLiability',
        'rentalCarBooking' => 'rentalCarBooking'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'partnerPrimaryInsuredId' => 'setPartnerPrimaryInsuredId',
        'partnerQuoteId' => 'setPartnerQuoteId',
        'effectiveDateTime' => 'setEffectiveDateTime',
        'requestDateTime' => 'setRequestDateTime',
        'expirationDateTime' => 'setExpirationDateTime',
        'currency' => 'setCurrency',
        'insuredPersons' => 'setInsuredPersons',
        'partnerId' => 'setPartnerId',
        'pricingRequestOrigin' => 'setPricingRequestOrigin',
        'partnerPrice' => 'setPartnerPrice',
        'appId' => 'setAppId',
        'appEnv' => 'setAppEnv',
        'purchaser' => 'setPurchaser',
        'brightwriteCookieId' => 'setBrightwriteCookieId',
        'policyDestinationCountryCode' => 'setPolicyDestinationCountryCode',
        'policyType' => 'setPolicyType',
        'requestedLiability' => 'setRequestedLiability',
        'policyExcess' => 'setPolicyExcess',
        'policyLiability' => 'setPolicyLiability',
        'currencyForExcessAndLiability' => 'setCurrencyForExcessAndLiability',
        'rentalCarBooking' => 'setRentalCarBooking'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'partnerPrimaryInsuredId' => 'getPartnerPrimaryInsuredId',
        'partnerQuoteId' => 'getPartnerQuoteId',
        'effectiveDateTime' => 'getEffectiveDateTime',
        'requestDateTime' => 'getRequestDateTime',
        'expirationDateTime' => 'getExpirationDateTime',
        'currency' => 'getCurrency',
        'insuredPersons' => 'getInsuredPersons',
        'partnerId' => 'getPartnerId',
        'pricingRequestOrigin' => 'getPricingRequestOrigin',
        'partnerPrice' => 'getPartnerPrice',
        'appId' => 'getAppId',
        'appEnv' => 'getAppEnv',
        'purchaser' => 'getPurchaser',
        'brightwriteCookieId' => 'getBrightwriteCookieId',
        'policyDestinationCountryCode' => 'getPolicyDestinationCountryCode',
        'policyType' => 'getPolicyType',
        'requestedLiability' => 'getRequestedLiability',
        'policyExcess' => 'getPolicyExcess',
        'policyLiability' => 'getPolicyLiability',
        'currencyForExcessAndLiability' => 'getCurrencyForExcessAndLiability',
        'rentalCarBooking' => 'getRentalCarBooking'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['partnerPrimaryInsuredId'] = isset($data['partnerPrimaryInsuredId']) ? $data['partnerPrimaryInsuredId'] : null;
        $this->container['partnerQuoteId'] = isset($data['partnerQuoteId']) ? $data['partnerQuoteId'] : null;
        $this->container['effectiveDateTime'] = isset($data['effectiveDateTime']) ? $data['effectiveDateTime'] : null;
        $this->container['requestDateTime'] = isset($data['requestDateTime']) ? $data['requestDateTime'] : null;
        $this->container['expirationDateTime'] = isset($data['expirationDateTime']) ? $data['expirationDateTime'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['insuredPersons'] = isset($data['insuredPersons']) ? $data['insuredPersons'] : null;
        $this->container['partnerId'] = isset($data['partnerId']) ? $data['partnerId'] : null;
        $this->container['pricingRequestOrigin'] = isset($data['pricingRequestOrigin']) ? $data['pricingRequestOrigin'] : null;
        $this->container['partnerPrice'] = isset($data['partnerPrice']) ? $data['partnerPrice'] : null;
        $this->container['appId'] = isset($data['appId']) ? $data['appId'] : null;
        $this->container['appEnv'] = isset($data['appEnv']) ? $data['appEnv'] : null;
        $this->container['purchaser'] = isset($data['purchaser']) ? $data['purchaser'] : null;
        $this->container['brightwriteCookieId'] = isset($data['brightwriteCookieId']) ? $data['brightwriteCookieId'] : null;
        $this->container['policyDestinationCountryCode'] = isset($data['policyDestinationCountryCode']) ? $data['policyDestinationCountryCode'] : null;
        $this->container['policyType'] = isset($data['policyType']) ? $data['policyType'] : null;
        $this->container['requestedLiability'] = isset($data['requestedLiability']) ? $data['requestedLiability'] : null;
        $this->container['policyExcess'] = isset($data['policyExcess']) ? $data['policyExcess'] : null;
        $this->container['policyLiability'] = isset($data['policyLiability']) ? $data['policyLiability'] : null;
        $this->container['currencyForExcessAndLiability'] = isset($data['currencyForExcessAndLiability']) ? $data['currencyForExcessAndLiability'] : null;
        $this->container['rentalCarBooking'] = isset($data['rentalCarBooking']) ? $data['rentalCarBooking'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['partnerPrimaryInsuredId']) && (strlen($this->container['partnerPrimaryInsuredId']) > 128)) {
            $invalid_properties[] = "invalid value for 'partnerPrimaryInsuredId', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['partnerQuoteId']) && (strlen($this->container['partnerQuoteId']) > 128)) {
            $invalid_properties[] = "invalid value for 'partnerQuoteId', the character length must be smaller than or equal to 128.";
        }

        if ($this->container['effectiveDateTime'] === null) {
            $invalid_properties[] = "'effectiveDateTime' can't be null";
        }
        if ($this->container['requestDateTime'] === null) {
            $invalid_properties[] = "'requestDateTime' can't be null";
        }
        if ($this->container['expirationDateTime'] === null) {
            $invalid_properties[] = "'expirationDateTime' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalid_properties[] = "'currency' can't be null";
        }
        if ((strlen($this->container['currency']) > 3)) {
            $invalid_properties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if ((strlen($this->container['currency']) < 3)) {
            $invalid_properties[] = "invalid value for 'currency', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['insuredPersons'] === null) {
            $invalid_properties[] = "'insuredPersons' can't be null";
        }
        if ($this->container['partnerId'] === null) {
            $invalid_properties[] = "'partnerId' can't be null";
        }
        if ((strlen($this->container['partnerId']) > 128)) {
            $invalid_properties[] = "invalid value for 'partnerId', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['pricingRequestOrigin']) && (strlen($this->container['pricingRequestOrigin']) > 512)) {
            $invalid_properties[] = "invalid value for 'pricingRequestOrigin', the character length must be smaller than or equal to 512.";
        }

        if ($this->container['partnerPrice'] === null) {
            $invalid_properties[] = "'partnerPrice' can't be null";
        }
        if (!is_null($this->container['appId']) && (strlen($this->container['appId']) > 128)) {
            $invalid_properties[] = "invalid value for 'appId', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['appEnv']) && (strlen($this->container['appEnv']) > 128)) {
            $invalid_properties[] = "invalid value for 'appEnv', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['brightwriteCookieId']) && (strlen($this->container['brightwriteCookieId']) > 128)) {
            $invalid_properties[] = "invalid value for 'brightwriteCookieId', the character length must be smaller than or equal to 128.";
        }

        if ($this->container['policyDestinationCountryCode'] === null) {
            $invalid_properties[] = "'policyDestinationCountryCode' can't be null";
        }
        if ((strlen($this->container['policyDestinationCountryCode']) > 2)) {
            $invalid_properties[] = "invalid value for 'policyDestinationCountryCode', the character length must be smaller than or equal to 2.";
        }

        if ((strlen($this->container['policyDestinationCountryCode']) < 2)) {
            $invalid_properties[] = "invalid value for 'policyDestinationCountryCode', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['policyType'] === null) {
            $invalid_properties[] = "'policyType' can't be null";
        }
        if ((strlen($this->container['policyType']) > 128)) {
            $invalid_properties[] = "invalid value for 'policyType', the character length must be smaller than or equal to 128.";
        }

        if ($this->container['policyExcess'] === null) {
            $invalid_properties[] = "'policyExcess' can't be null";
        }
        if ($this->container['policyLiability'] === null) {
            $invalid_properties[] = "'policyLiability' can't be null";
        }
        if ($this->container['currencyForExcessAndLiability'] === null) {
            $invalid_properties[] = "'currencyForExcessAndLiability' can't be null";
        }
        if ((strlen($this->container['currencyForExcessAndLiability']) > 3)) {
            $invalid_properties[] = "invalid value for 'currencyForExcessAndLiability', the character length must be smaller than or equal to 3.";
        }

        if ((strlen($this->container['currencyForExcessAndLiability']) < 3)) {
            $invalid_properties[] = "invalid value for 'currencyForExcessAndLiability', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['rentalCarBooking'] === null) {
            $invalid_properties[] = "'rentalCarBooking' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (strlen($this->container['partnerPrimaryInsuredId']) > 128) {
            return false;
        }
        if (strlen($this->container['partnerQuoteId']) > 128) {
            return false;
        }
        if ($this->container['effectiveDateTime'] === null) {
            return false;
        }
        if ($this->container['requestDateTime'] === null) {
            return false;
        }
        if ($this->container['expirationDateTime'] === null) {
            return false;
        }
        if ($this->container['currency'] === null) {
            return false;
        }
        if (strlen($this->container['currency']) > 3) {
            return false;
        }
        if (strlen($this->container['currency']) < 3) {
            return false;
        }
        if ($this->container['insuredPersons'] === null) {
            return false;
        }
        if ($this->container['partnerId'] === null) {
            return false;
        }
        if (strlen($this->container['partnerId']) > 128) {
            return false;
        }
        if (strlen($this->container['pricingRequestOrigin']) > 512) {
            return false;
        }
        if ($this->container['partnerPrice'] === null) {
            return false;
        }
        if (strlen($this->container['appId']) > 128) {
            return false;
        }
        if (strlen($this->container['appEnv']) > 128) {
            return false;
        }
        if (strlen($this->container['brightwriteCookieId']) > 128) {
            return false;
        }
        if ($this->container['policyDestinationCountryCode'] === null) {
            return false;
        }
        if (strlen($this->container['policyDestinationCountryCode']) > 2) {
            return false;
        }
        if (strlen($this->container['policyDestinationCountryCode']) < 2) {
            return false;
        }
        if ($this->container['policyType'] === null) {
            return false;
        }
        if (strlen($this->container['policyType']) > 128) {
            return false;
        }
        if ($this->container['policyExcess'] === null) {
            return false;
        }
        if ($this->container['policyLiability'] === null) {
            return false;
        }
        if ($this->container['currencyForExcessAndLiability'] === null) {
            return false;
        }
        if (strlen($this->container['currencyForExcessAndLiability']) > 3) {
            return false;
        }
        if (strlen($this->container['currencyForExcessAndLiability']) < 3) {
            return false;
        }
        if ($this->container['rentalCarBooking'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets partnerPrimaryInsuredId
     * @return string
     */
    public function getPartnerPrimaryInsuredId()
    {
        return $this->container['partnerPrimaryInsuredId'];
    }

    /**
     * Sets partnerPrimaryInsuredId
     * @param string $partnerPrimaryInsuredId Insured Person ID of the policy holder
     * @return $this
     */
    public function setPartnerPrimaryInsuredId($partnerPrimaryInsuredId)
    {
        if (!is_null($partnerPrimaryInsuredId) && (strlen($partnerPrimaryInsuredId) > 128)) {
            throw new \InvalidArgumentException('invalid length for $partnerPrimaryInsuredId when calling PricingRequestCarRental., must be smaller than or equal to 128.');
        }

        $this->container['partnerPrimaryInsuredId'] = $partnerPrimaryInsuredId;

        return $this;
    }

    /**
     * Gets partnerQuoteId
     * @return string
     */
    public function getPartnerQuoteId()
    {
        return $this->container['partnerQuoteId'];
    }

    /**
     * Sets partnerQuoteId
     * @param string $partnerQuoteId Quote identifier in partner's database
     * @return $this
     */
    public function setPartnerQuoteId($partnerQuoteId)
    {
        if (!is_null($partnerQuoteId) && (strlen($partnerQuoteId) > 128)) {
            throw new \InvalidArgumentException('invalid length for $partnerQuoteId when calling PricingRequestCarRental., must be smaller than or equal to 128.');
        }

        $this->container['partnerQuoteId'] = $partnerQuoteId;

        return $this;
    }

    /**
     * Gets effectiveDateTime
     * @return \DateTime
     */
    public function getEffectiveDateTime()
    {
        return $this->container['effectiveDateTime'];
    }

    /**
     * Sets effectiveDateTime
     * @param \DateTime $effectiveDateTime Effective date and time for the policy (use 00:00:00 time if coverage starts beginning of day)
     * @return $this
     */
    public function setEffectiveDateTime($effectiveDateTime)
    {
        $this->container['effectiveDateTime'] = $effectiveDateTime;

        return $this;
    }

    /**
     * Gets requestDateTime
     * @return \DateTime
     */
    public function getRequestDateTime()
    {
        return $this->container['requestDateTime'];
    }

    /**
     * Sets requestDateTime
     * @param \DateTime $requestDateTime Timestamp of the quote request when it was first received by the distributor
     * @return $this
     */
    public function setRequestDateTime($requestDateTime)
    {
        $this->container['requestDateTime'] = $requestDateTime;

        return $this;
    }

    /**
     * Gets expirationDateTime
     * @return \DateTime
     */
    public function getExpirationDateTime()
    {
        return $this->container['expirationDateTime'];
    }

    /**
     * Sets expirationDateTime
     * @param \DateTime $expirationDateTime Expiration date and time of the policy (use 23:59:59 if date is inclusive OR 00:00:00 time of next day if date is exclusive.
     * @return $this
     */
    public function setExpirationDateTime($expirationDateTime)
    {
        $this->container['expirationDateTime'] = $expirationDateTime;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency Currency used. Three character ISO 4217
     * @return $this
     */
    public function setCurrency($currency)
    {
        if ((strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling PricingRequestCarRental., must be smaller than or equal to 3.');
        }
        if ((strlen($currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling PricingRequestCarRental., must be bigger than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets insuredPersons
     * @return \BrightWrite\Model\InsuredPerson[]
     */
    public function getInsuredPersons()
    {
        return $this->container['insuredPersons'];
    }

    /**
     * Sets insuredPersons
     * @param \BrightWrite\Model\InsuredPerson[] $insuredPersons List of people who are insured/covered by this policy
     * @return $this
     */
    public function setInsuredPersons($insuredPersons)
    {
        $this->container['insuredPersons'] = $insuredPersons;

        return $this;
    }

    /**
     * Gets partnerId
     * @return string
     */
    public function getPartnerId()
    {
        return $this->container['partnerId'];
    }

    /**
     * Sets partnerId
     * @param string $partnerId Partner identifier. Human and machine readable so we can use in tagging
     * @return $this
     */
    public function setPartnerId($partnerId)
    {
        if ((strlen($partnerId) > 128)) {
            throw new \InvalidArgumentException('invalid length for $partnerId when calling PricingRequestCarRental., must be smaller than or equal to 128.');
        }

        $this->container['partnerId'] = $partnerId;

        return $this;
    }

    /**
     * Gets pricingRequestOrigin
     * @return string
     */
    public function getPricingRequestOrigin()
    {
        return $this->container['pricingRequestOrigin'];
    }

    /**
     * Sets pricingRequestOrigin
     * @param string $pricingRequestOrigin Identifier, which partner use to specify pricing request origin
     * @return $this
     */
    public function setPricingRequestOrigin($pricingRequestOrigin)
    {
        if (!is_null($pricingRequestOrigin) && (strlen($pricingRequestOrigin) > 512)) {
            throw new \InvalidArgumentException('invalid length for $pricingRequestOrigin when calling PricingRequestCarRental., must be smaller than or equal to 512.');
        }

        $this->container['pricingRequestOrigin'] = $pricingRequestOrigin;

        return $this;
    }

    /**
     * Gets partnerPrice
     * @return double
     */
    public function getPartnerPrice()
    {
        return $this->container['partnerPrice'];
    }

    /**
     * Sets partnerPrice
     * @param double $partnerPrice The price above which the insurance must be sold if the book is to be profitable
     * @return $this
     */
    public function setPartnerPrice($partnerPrice)
    {
        $this->container['partnerPrice'] = $partnerPrice;

        return $this;
    }

    /**
     * Gets appId
     * @return string
     */
    public function getAppId()
    {
        return $this->container['appId'];
    }

    /**
     * Sets appId
     * @param string $appId Optinal field to identify source of traffic. For example website name or mobile app identifier.
     * @return $this
     */
    public function setAppId($appId)
    {
        if (!is_null($appId) && (strlen($appId) > 128)) {
            throw new \InvalidArgumentException('invalid length for $appId when calling PricingRequestCarRental., must be smaller than or equal to 128.');
        }

        $this->container['appId'] = $appId;

        return $this;
    }

    /**
     * Gets appEnv
     * @return string
     */
    public function getAppEnv()
    {
        return $this->container['appEnv'];
    }

    /**
     * Sets appEnv
     * @param string $appEnv Optinal field which can be used to distinguish production and staging or any other test environments which partners can use as part of their processes.
     * @return $this
     */
    public function setAppEnv($appEnv)
    {
        if (!is_null($appEnv) && (strlen($appEnv) > 128)) {
            throw new \InvalidArgumentException('invalid length for $appEnv when calling PricingRequestCarRental., must be smaller than or equal to 128.');
        }

        $this->container['appEnv'] = $appEnv;

        return $this;
    }

    /**
     * Gets purchaser
     * @return \BrightWrite\Model\Purchaser
     */
    public function getPurchaser()
    {
        return $this->container['purchaser'];
    }

    /**
     * Sets purchaser
     * @param \BrightWrite\Model\Purchaser $purchaser
     * @return $this
     */
    public function setPurchaser($purchaser)
    {
        $this->container['purchaser'] = $purchaser;

        return $this;
    }

    /**
     * Gets brightwriteCookieId
     * @return string
     */
    public function getBrightwriteCookieId()
    {
        return $this->container['brightwriteCookieId'];
    }

    /**
     * Sets brightwriteCookieId
     * @param string $brightwriteCookieId BrightWrite cookie identifier
     * @return $this
     */
    public function setBrightwriteCookieId($brightwriteCookieId)
    {
        if (!is_null($brightwriteCookieId) && (strlen($brightwriteCookieId) > 128)) {
            throw new \InvalidArgumentException('invalid length for $brightwriteCookieId when calling PricingRequestCarRental., must be smaller than or equal to 128.');
        }

        $this->container['brightwriteCookieId'] = $brightwriteCookieId;

        return $this;
    }

    /**
     * Gets policyDestinationCountryCode
     * @return string
     */
    public function getPolicyDestinationCountryCode()
    {
        return $this->container['policyDestinationCountryCode'];
    }

    /**
     * Sets policyDestinationCountryCode
     * @param string $policyDestinationCountryCode ISO 3166 Two Character standard
     * @return $this
     */
    public function setPolicyDestinationCountryCode($policyDestinationCountryCode)
    {
        if ((strlen($policyDestinationCountryCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $policyDestinationCountryCode when calling PricingRequestCarRental., must be smaller than or equal to 2.');
        }
        if ((strlen($policyDestinationCountryCode) < 2)) {
            throw new \InvalidArgumentException('invalid length for $policyDestinationCountryCode when calling PricingRequestCarRental., must be bigger than or equal to 2.');
        }

        $this->container['policyDestinationCountryCode'] = $policyDestinationCountryCode;

        return $this;
    }

    /**
     * Gets policyType
     * @return string
     */
    public function getPolicyType()
    {
        return $this->container['policyType'];
    }

    /**
     * Sets policyType
     * @param string $policyType Requested policy type [ ExcessReduction, CDW, Comprehensive, RoadsideAssistance, FullProtection ]. This is the policy type code agreed with Partner in advance.
     * @return $this
     */
    public function setPolicyType($policyType)
    {
        if ((strlen($policyType) > 128)) {
            throw new \InvalidArgumentException('invalid length for $policyType when calling PricingRequestCarRental., must be smaller than or equal to 128.');
        }

        $this->container['policyType'] = $policyType;

        return $this;
    }

    /**
     * Gets requestedLiability
     * @return double
     */
    public function getRequestedLiability()
    {
        return $this->container['requestedLiability'];
    }

    /**
     * Sets requestedLiability
     * @param double $requestedLiability This is the max payout for the policy requested by the partner (the Cover Amount in RC.com API)
     * @return $this
     */
    public function setRequestedLiability($requestedLiability)
    {
        $this->container['requestedLiability'] = $requestedLiability;

        return $this;
    }

    /**
     * Gets policyExcess
     * @return double
     */
    public function getPolicyExcess()
    {
        return $this->container['policyExcess'];
    }

    /**
     * Sets policyExcess
     * @param double $policyExcess Excess that the underwriter has quoted
     * @return $this
     */
    public function setPolicyExcess($policyExcess)
    {
        $this->container['policyExcess'] = $policyExcess;

        return $this;
    }

    /**
     * Gets policyLiability
     * @return double
     */
    public function getPolicyLiability()
    {
        return $this->container['policyLiability'];
    }

    /**
     * Sets policyLiability
     * @param double $policyLiability Liability that the underwriter has quoted
     * @return $this
     */
    public function setPolicyLiability($policyLiability)
    {
        $this->container['policyLiability'] = $policyLiability;

        return $this;
    }

    /**
     * Gets currencyForExcessAndLiability
     * @return string
     */
    public function getCurrencyForExcessAndLiability()
    {
        return $this->container['currencyForExcessAndLiability'];
    }

    /**
     * Sets currencyForExcessAndLiability
     * @param string $currencyForExcessAndLiability Three character ISO 4217
     * @return $this
     */
    public function setCurrencyForExcessAndLiability($currencyForExcessAndLiability)
    {
        if ((strlen($currencyForExcessAndLiability) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currencyForExcessAndLiability when calling PricingRequestCarRental., must be smaller than or equal to 3.');
        }
        if ((strlen($currencyForExcessAndLiability) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currencyForExcessAndLiability when calling PricingRequestCarRental., must be bigger than or equal to 3.');
        }

        $this->container['currencyForExcessAndLiability'] = $currencyForExcessAndLiability;

        return $this;
    }

    /**
     * Gets rentalCarBooking
     * @return \BrightWrite\Model\BookingRentalCar
     */
    public function getRentalCarBooking()
    {
        return $this->container['rentalCarBooking'];
    }

    /**
     * Sets rentalCarBooking
     * @param \BrightWrite\Model\BookingRentalCar $rentalCarBooking
     * @return $this
     */
    public function setRentalCarBooking($rentalCarBooking)
    {
        $this->container['rentalCarBooking'] = $rentalCarBooking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this));
    }
}
