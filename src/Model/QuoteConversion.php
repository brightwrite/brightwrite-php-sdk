<?php
/**
 * QuoteConversion
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightWrite
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BrightWriteâ„¢
 *
 * BrightWrite API
 *
 * OpenAPI spec version: 0.1.7
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightWrite\Model;

use \ArrayAccess;

/**
 * QuoteConversion Class Doc Comment
 *
 * @category    Class
 * @package     BrightWrite
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QuoteConversion implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'QuoteConversion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'partnerQuoteId' => 'string',
        'pricingRequestId' => 'string',
        'purchaser' => '\BrightWrite\Model\Purchaser',
        'rentalCarBooking' => '\BrightWrite\Model\BookingRentalCar'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'partnerQuoteId' => null,
        'pricingRequestId' => null,
        'purchaser' => null,
        'rentalCarBooking' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'partnerQuoteId' => 'partnerQuoteId',
        'pricingRequestId' => 'pricingRequestId',
        'purchaser' => 'purchaser',
        'rentalCarBooking' => 'rentalCarBooking'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'partnerQuoteId' => 'setPartnerQuoteId',
        'pricingRequestId' => 'setPricingRequestId',
        'purchaser' => 'setPurchaser',
        'rentalCarBooking' => 'setRentalCarBooking'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'partnerQuoteId' => 'getPartnerQuoteId',
        'pricingRequestId' => 'getPricingRequestId',
        'purchaser' => 'getPurchaser',
        'rentalCarBooking' => 'getRentalCarBooking'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['partnerQuoteId'] = isset($data['partnerQuoteId']) ? $data['partnerQuoteId'] : null;
        $this->container['pricingRequestId'] = isset($data['pricingRequestId']) ? $data['pricingRequestId'] : null;
        $this->container['purchaser'] = isset($data['purchaser']) ? $data['purchaser'] : null;
        $this->container['rentalCarBooking'] = isset($data['rentalCarBooking']) ? $data['rentalCarBooking'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['partnerQuoteId']) && (strlen($this->container['partnerQuoteId']) > 128)) {
            $invalid_properties[] = "invalid value for 'partnerQuoteId', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['pricingRequestId']) && (strlen($this->container['pricingRequestId']) > 256)) {
            $invalid_properties[] = "invalid value for 'pricingRequestId', the character length must be smaller than or equal to 256.";
        }

        if ($this->container['purchaser'] === null) {
            $invalid_properties[] = "'purchaser' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (strlen($this->container['partnerQuoteId']) > 128) {
            return false;
        }
        if (strlen($this->container['pricingRequestId']) > 256) {
            return false;
        }
        if ($this->container['purchaser'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets partnerQuoteId
     * @return string
     */
    public function getPartnerQuoteId()
    {
        return $this->container['partnerQuoteId'];
    }

    /**
     * Sets partnerQuoteId
     * @param string $partnerQuoteId Quote ID used by the distributor. Required if we are also collecting quote info with java script from the distributor's website. Optional if we are not getting info from javasript
     * @return $this
     */
    public function setPartnerQuoteId($partnerQuoteId)
    {
        if (!is_null($partnerQuoteId) && (strlen($partnerQuoteId) > 128)) {
            throw new \InvalidArgumentException('invalid length for $partnerQuoteId when calling QuoteConversion., must be smaller than or equal to 128.');
        }

        $this->container['partnerQuoteId'] = $partnerQuoteId;

        return $this;
    }

    /**
     * Gets pricingRequestId
     * @return string
     */
    public function getPricingRequestId()
    {
        return $this->container['pricingRequestId'];
    }

    /**
     * Sets pricingRequestId
     * @param string $pricingRequestId If it's impossible to use any type of quote IDs, we need to report conversions based on prcing request ID privdied in pricing request endpoint
     * @return $this
     */
    public function setPricingRequestId($pricingRequestId)
    {
        if (!is_null($pricingRequestId) && (strlen($pricingRequestId) > 256)) {
            throw new \InvalidArgumentException('invalid length for $pricingRequestId when calling QuoteConversion., must be smaller than or equal to 256.');
        }

        $this->container['pricingRequestId'] = $pricingRequestId;

        return $this;
    }

    /**
     * Gets purchaser
     * @return \BrightWrite\Model\Purchaser
     */
    public function getPurchaser()
    {
        return $this->container['purchaser'];
    }

    /**
     * Sets purchaser
     * @param \BrightWrite\Model\Purchaser $purchaser Partners can provide more information in pricing request after the booking confirmation
     * @return $this
     */
    public function setPurchaser($purchaser)
    {
        $this->container['purchaser'] = $purchaser;

        return $this;
    }

    /**
     * Gets rentalCarBooking
     * @return \BrightWrite\Model\BookingRentalCar
     */
    public function getRentalCarBooking()
    {
        return $this->container['rentalCarBooking'];
    }

    /**
     * Sets rentalCarBooking
     * @param \BrightWrite\Model\BookingRentalCar $rentalCarBooking Partners can provide more information in pricing request after the booking confirmation
     * @return $this
     */
    public function setRentalCarBooking($rentalCarBooking)
    {
        $this->container['rentalCarBooking'] = $rentalCarBooking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this));
    }
}
