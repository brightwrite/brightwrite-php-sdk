<?php
/**
 * InsuredPerson
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightWrite
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BrightWriteâ„¢
 *
 * BrightWrite API
 *
 * OpenAPI spec version: 0.1.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightWrite\Model;

use \ArrayAccess;

/**
 * InsuredPerson Class Doc Comment
 *
 * @category    Class */
/**
 * @package     BrightWrite
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InsuredPerson implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InsuredPerson';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'countryOfResidence' => 'string',
        'age' => 'int',
        'yearOfBirth' => 'int',
        'lastName' => 'string',
        'dateOfBirth' => '\DateTime',
        'secondaryLastName' => 'string',
        'insuredPersonId' => 'string',
        'firstName' => 'string',
        'name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'countryOfResidence' => 'countryOfResidence',
        'age' => 'age',
        'yearOfBirth' => 'yearOfBirth',
        'lastName' => 'lastName',
        'dateOfBirth' => 'dateOfBirth',
        'secondaryLastName' => 'secondaryLastName',
        'insuredPersonId' => 'insuredPersonId',
        'firstName' => 'firstName',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'countryOfResidence' => 'setCountryOfResidence',
        'age' => 'setAge',
        'yearOfBirth' => 'setYearOfBirth',
        'lastName' => 'setLastName',
        'dateOfBirth' => 'setDateOfBirth',
        'secondaryLastName' => 'setSecondaryLastName',
        'insuredPersonId' => 'setInsuredPersonId',
        'firstName' => 'setFirstName',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'countryOfResidence' => 'getCountryOfResidence',
        'age' => 'getAge',
        'yearOfBirth' => 'getYearOfBirth',
        'lastName' => 'getLastName',
        'dateOfBirth' => 'getDateOfBirth',
        'secondaryLastName' => 'getSecondaryLastName',
        'insuredPersonId' => 'getInsuredPersonId',
        'firstName' => 'getFirstName',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['countryOfResidence'] = isset($data['countryOfResidence']) ? $data['countryOfResidence'] : null;
        $this->container['age'] = isset($data['age']) ? $data['age'] : null;
        $this->container['yearOfBirth'] = isset($data['yearOfBirth']) ? $data['yearOfBirth'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['dateOfBirth'] = isset($data['dateOfBirth']) ? $data['dateOfBirth'] : null;
        $this->container['secondaryLastName'] = isset($data['secondaryLastName']) ? $data['secondaryLastName'] : null;
        $this->container['insuredPersonId'] = isset($data['insuredPersonId']) ? $data['insuredPersonId'] : null;
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['countryOfResidence'] === null) {
            $invalid_properties[] = "'countryOfResidence' can't be null";
        }
        if ((strlen($this->container['countryOfResidence']) > 2)) {
            $invalid_properties[] = "invalid value for 'countryOfResidence', the character length must be smaller than or equal to 2.";
        }

        if ((strlen($this->container['countryOfResidence']) < 2)) {
            $invalid_properties[] = "invalid value for 'countryOfResidence', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['age']) && ($this->container['age'] > 100.0)) {
            $invalid_properties[] = "invalid value for 'age', must be smaller than or equal to 100.0.";
        }

        if (!is_null($this->container['age']) && ($this->container['age'] < 0)) {
            $invalid_properties[] = "invalid value for 'age', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['yearOfBirth']) && ($this->container['yearOfBirth'] > 2040.0)) {
            $invalid_properties[] = "invalid value for 'yearOfBirth', must be smaller than or equal to 2040.0.";
        }

        if (!is_null($this->container['yearOfBirth']) && ($this->container['yearOfBirth'] < 1910.0)) {
            $invalid_properties[] = "invalid value for 'yearOfBirth', must be bigger than or equal to 1910.0.";
        }

        if (!is_null($this->container['lastName']) && (strlen($this->container['lastName']) > 64)) {
            $invalid_properties[] = "invalid value for 'lastName', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['lastName']) && (strlen($this->container['lastName']) < 2)) {
            $invalid_properties[] = "invalid value for 'lastName', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['secondaryLastName']) && (strlen($this->container['secondaryLastName']) > 64)) {
            $invalid_properties[] = "invalid value for 'secondaryLastName', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['secondaryLastName']) && (strlen($this->container['secondaryLastName']) < 2)) {
            $invalid_properties[] = "invalid value for 'secondaryLastName', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['insuredPersonId'] === null) {
            $invalid_properties[] = "'insuredPersonId' can't be null";
        }
        if ((strlen($this->container['insuredPersonId']) > 64)) {
            $invalid_properties[] = "invalid value for 'insuredPersonId', the character length must be smaller than or equal to 64.";
        }

        if ((strlen($this->container['insuredPersonId']) < 2)) {
            $invalid_properties[] = "invalid value for 'insuredPersonId', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['firstName']) && (strlen($this->container['firstName']) > 64)) {
            $invalid_properties[] = "invalid value for 'firstName', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['firstName']) && (strlen($this->container['firstName']) < 2)) {
            $invalid_properties[] = "invalid value for 'firstName', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['name']) && (strlen($this->container['name']) > 128)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['name']) && (strlen($this->container['name']) < 2)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be bigger than or equal to 2.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['countryOfResidence'] === null) {
            return false;
        }
        if (strlen($this->container['countryOfResidence']) > 2) {
            return false;
        }
        if (strlen($this->container['countryOfResidence']) < 2) {
            return false;
        }
        if ($this->container['age'] > 100.0) {
            return false;
        }
        if ($this->container['age'] < 0) {
            return false;
        }
        if ($this->container['yearOfBirth'] > 2040.0) {
            return false;
        }
        if ($this->container['yearOfBirth'] < 1910.0) {
            return false;
        }
        if (strlen($this->container['lastName']) > 64) {
            return false;
        }
        if (strlen($this->container['lastName']) < 2) {
            return false;
        }
        if (strlen($this->container['secondaryLastName']) > 64) {
            return false;
        }
        if (strlen($this->container['secondaryLastName']) < 2) {
            return false;
        }
        if ($this->container['insuredPersonId'] === null) {
            return false;
        }
        if (strlen($this->container['insuredPersonId']) > 64) {
            return false;
        }
        if (strlen($this->container['insuredPersonId']) < 2) {
            return false;
        }
        if (strlen($this->container['firstName']) > 64) {
            return false;
        }
        if (strlen($this->container['firstName']) < 2) {
            return false;
        }
        if (strlen($this->container['name']) > 128) {
            return false;
        }
        if (strlen($this->container['name']) < 2) {
            return false;
        }
        return true;
    }


    /**
     * Gets countryOfResidence
     * @return string
     */
    public function getCountryOfResidence()
    {
        return $this->container['countryOfResidence'];
    }

    /**
     * Sets countryOfResidence
     * @param string $countryOfResidence Two characters (ISO 3166 standard)
     * @return $this
     */
    public function setCountryOfResidence($countryOfResidence)
    {
        if ((strlen($countryOfResidence) > 2)) {
            throw new \InvalidArgumentException('invalid length for $countryOfResidence when calling InsuredPerson., must be smaller than or equal to 2.');
        }
        if ((strlen($countryOfResidence) < 2)) {
            throw new \InvalidArgumentException('invalid length for $countryOfResidence when calling InsuredPerson., must be bigger than or equal to 2.');
        }

        $this->container['countryOfResidence'] = $countryOfResidence;

        return $this;
    }

    /**
     * Gets age
     * @return int
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     * @param int $age Either age or year of birth should be collected, depending on what is collected from customer. Only do this if permitted by partner agreement to collect this. This should be age at time trip starts. It could also be age at time of booking but partners should advise which one it is.
     * @return $this
     */
    public function setAge($age)
    {

        if (!is_null($age) && ($age > 100.0)) {
            throw new \InvalidArgumentException('invalid value for $age when calling InsuredPerson., must be smaller than or equal to 100.0.');
        }
        if (!is_null($age) && ($age < 0)) {
            throw new \InvalidArgumentException('invalid value for $age when calling InsuredPerson., must be bigger than or equal to 0.');
        }

        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets yearOfBirth
     * @return int
     */
    public function getYearOfBirth()
    {
        return $this->container['yearOfBirth'];
    }

    /**
     * Sets yearOfBirth
     * @param int $yearOfBirth Either age or year of birth should be collected, depending on what is collected from customer. Only do this if permitted by partner agreement to collect this.
     * @return $this
     */
    public function setYearOfBirth($yearOfBirth)
    {

        if (!is_null($yearOfBirth) && ($yearOfBirth > 2040.0)) {
            throw new \InvalidArgumentException('invalid value for $yearOfBirth when calling InsuredPerson., must be smaller than or equal to 2040.0.');
        }
        if (!is_null($yearOfBirth) && ($yearOfBirth < 1910.0)) {
            throw new \InvalidArgumentException('invalid value for $yearOfBirth when calling InsuredPerson., must be bigger than or equal to 1910.0.');
        }

        $this->container['yearOfBirth'] = $yearOfBirth;

        return $this;
    }

    /**
     * Gets lastName
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     * @param string $lastName Family name
     * @return $this
     */
    public function setLastName($lastName)
    {
        if (!is_null($lastName) && (strlen($lastName) > 64)) {
            throw new \InvalidArgumentException('invalid length for $lastName when calling InsuredPerson., must be smaller than or equal to 64.');
        }
        if (!is_null($lastName) && (strlen($lastName) < 2)) {
            throw new \InvalidArgumentException('invalid length for $lastName when calling InsuredPerson., must be bigger than or equal to 2.');
        }

        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets dateOfBirth
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     * @param \DateTime $dateOfBirth Date of birth. Provide if permitted by partner.
     * @return $this
     */
    public function setDateOfBirth($dateOfBirth)
    {
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets secondaryLastName
     * @return string
     */
    public function getSecondaryLastName()
    {
        return $this->container['secondaryLastName'];
    }

    /**
     * Sets secondaryLastName
     * @param string $secondaryLastName An additional last name for a person e.g. Spanish names have two last names
     * @return $this
     */
    public function setSecondaryLastName($secondaryLastName)
    {
        if (!is_null($secondaryLastName) && (strlen($secondaryLastName) > 64)) {
            throw new \InvalidArgumentException('invalid length for $secondaryLastName when calling InsuredPerson., must be smaller than or equal to 64.');
        }
        if (!is_null($secondaryLastName) && (strlen($secondaryLastName) < 2)) {
            throw new \InvalidArgumentException('invalid length for $secondaryLastName when calling InsuredPerson., must be bigger than or equal to 2.');
        }

        $this->container['secondaryLastName'] = $secondaryLastName;

        return $this;
    }

    /**
     * Gets insuredPersonId
     * @return string
     */
    public function getInsuredPersonId()
    {
        return $this->container['insuredPersonId'];
    }

    /**
     * Sets insuredPersonId
     * @param string $insuredPersonId Internal ID used by the insurer.
     * @return $this
     */
    public function setInsuredPersonId($insuredPersonId)
    {
        if ((strlen($insuredPersonId) > 64)) {
            throw new \InvalidArgumentException('invalid length for $insuredPersonId when calling InsuredPerson., must be smaller than or equal to 64.');
        }
        if ((strlen($insuredPersonId) < 2)) {
            throw new \InvalidArgumentException('invalid length for $insuredPersonId when calling InsuredPerson., must be bigger than or equal to 2.');
        }

        $this->container['insuredPersonId'] = $insuredPersonId;

        return $this;
    }

    /**
     * Gets firstName
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     * @param string $firstName Given name, e.g. first name of a person in US. This can be used along with familyName instead of the name property.
     * @return $this
     */
    public function setFirstName($firstName)
    {
        if (!is_null($firstName) && (strlen($firstName) > 64)) {
            throw new \InvalidArgumentException('invalid length for $firstName when calling InsuredPerson., must be smaller than or equal to 64.');
        }
        if (!is_null($firstName) && (strlen($firstName) < 2)) {
            throw new \InvalidArgumentException('invalid length for $firstName when calling InsuredPerson., must be bigger than or equal to 2.');
        }

        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Full name of a person. Can be send instead of combination of first name and last name.
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (strlen($name) > 128)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InsuredPerson., must be smaller than or equal to 128.');
        }
        if (!is_null($name) && (strlen($name) < 2)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InsuredPerson., must be bigger than or equal to 2.');
        }

        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this));
    }
}
