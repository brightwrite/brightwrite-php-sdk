<?php
/**
 * InsuredPerson
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightWrite
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightWrite\Model;

use \ArrayAccess;
/**
 * InsuredPerson Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     BrightWrite
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InsuredPerson implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'partnerInsuredPersonId' => 'string',
        'countryOfResidence' => 'string',
        'age' => 'int',
        'yearOfBirth' => 'int',
        'dateOfBirth' => '\DateTime',
        'firstName' => 'string',
        'lastName' => 'string',
        'secondaryLastName' => 'string',
        'name' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'partnerInsuredPersonId' => 'partnerInsuredPersonId',
        'countryOfResidence' => 'countryOfResidence',
        'age' => 'age',
        'yearOfBirth' => 'yearOfBirth',
        'dateOfBirth' => 'dateOfBirth',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'secondaryLastName' => 'secondaryLastName',
        'name' => 'name'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'partnerInsuredPersonId' => 'setPartnerInsuredPersonId',
        'countryOfResidence' => 'setCountryOfResidence',
        'age' => 'setAge',
        'yearOfBirth' => 'setYearOfBirth',
        'dateOfBirth' => 'setDateOfBirth',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'secondaryLastName' => 'setSecondaryLastName',
        'name' => 'setName'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'partnerInsuredPersonId' => 'getPartnerInsuredPersonId',
        'countryOfResidence' => 'getCountryOfResidence',
        'age' => 'getAge',
        'yearOfBirth' => 'getYearOfBirth',
        'dateOfBirth' => 'getDateOfBirth',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'secondaryLastName' => 'getSecondaryLastName',
        'name' => 'getName'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $partnerInsuredPersonId Internal ID used by the partner
      * @var string
      */
    protected $partnerInsuredPersonId;
    
    /**
      * $countryOfResidence Two characters (ISO 3166 standard)
      * @var string
      */
    protected $countryOfResidence;
    
    /**
      * $age Either age or year of birth should be collected, depending on what is collected from purchaser. Only do this if permitted by partner agreement to collect this. This should be age at time trip starts. It could also be age at time of booking but partners should advise which one it is
      * @var int
      */
    protected $age;
    
    /**
      * $yearOfBirth Either age or year of birth should be collected, depending on what is collected from purchaser. Only do this if permitted by partner agreement to collect this
      * @var int
      */
    protected $yearOfBirth;
    
    /**
      * $dateOfBirth Date of birth. Provide if permitted by partner
      * @var \DateTime
      */
    protected $dateOfBirth;
    
    /**
      * $firstName Given name, e.g. first name of a person in US. This can be used along with familyName instead of the name property
      * @var string
      */
    protected $firstName;
    
    /**
      * $lastName Family name
      * @var string
      */
    protected $lastName;
    
    /**
      * $secondaryLastName An additional last name for a person e.g. Spanish names have two last names
      * @var string
      */
    protected $secondaryLastName;
    
    /**
      * $name Full name of a person. Can be send instead of combination of first name and last name
      * @var string
      */
    protected $name;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->partnerInsuredPersonId = $data["partnerInsuredPersonId"];
            $this->countryOfResidence = $data["countryOfResidence"];
            $this->age = $data["age"];
            $this->yearOfBirth = $data["yearOfBirth"];
            $this->dateOfBirth = $data["dateOfBirth"];
            $this->firstName = $data["firstName"];
            $this->lastName = $data["lastName"];
            $this->secondaryLastName = $data["secondaryLastName"];
            $this->name = $data["name"];
        }
    }
    
    /**
     * Gets partnerInsuredPersonId
     * @return string
     */
    public function getPartnerInsuredPersonId()
    {
        return $this->partnerInsuredPersonId;
    }
  
    /**
     * Sets partnerInsuredPersonId
     * @param string $partnerInsuredPersonId Internal ID used by the partner
     * @return $this
     */
    public function setPartnerInsuredPersonId($partnerInsuredPersonId)
    {
        
        $this->partnerInsuredPersonId = $partnerInsuredPersonId;
        return $this;
    }
    
    /**
     * Gets countryOfResidence
     * @return string
     */
    public function getCountryOfResidence()
    {
        return $this->countryOfResidence;
    }
  
    /**
     * Sets countryOfResidence
     * @param string $countryOfResidence Two characters (ISO 3166 standard)
     * @return $this
     */
    public function setCountryOfResidence($countryOfResidence)
    {
        
        $this->countryOfResidence = $countryOfResidence;
        return $this;
    }
    
    /**
     * Gets age
     * @return int
     */
    public function getAge()
    {
        return $this->age;
    }
  
    /**
     * Sets age
     * @param int $age Either age or year of birth should be collected, depending on what is collected from purchaser. Only do this if permitted by partner agreement to collect this. This should be age at time trip starts. It could also be age at time of booking but partners should advise which one it is
     * @return $this
     */
    public function setAge($age)
    {
        
        $this->age = $age;
        return $this;
    }
    
    /**
     * Gets yearOfBirth
     * @return int
     */
    public function getYearOfBirth()
    {
        return $this->yearOfBirth;
    }
  
    /**
     * Sets yearOfBirth
     * @param int $yearOfBirth Either age or year of birth should be collected, depending on what is collected from purchaser. Only do this if permitted by partner agreement to collect this
     * @return $this
     */
    public function setYearOfBirth($yearOfBirth)
    {
        
        $this->yearOfBirth = $yearOfBirth;
        return $this;
    }
    
    /**
     * Gets dateOfBirth
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->dateOfBirth;
    }
  
    /**
     * Sets dateOfBirth
     * @param \DateTime $dateOfBirth Date of birth. Provide if permitted by partner
     * @return $this
     */
    public function setDateOfBirth($dateOfBirth)
    {
        
        $this->dateOfBirth = $dateOfBirth;
        return $this;
    }
    
    /**
     * Gets firstName
     * @return string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }
  
    /**
     * Sets firstName
     * @param string $firstName Given name, e.g. first name of a person in US. This can be used along with familyName instead of the name property
     * @return $this
     */
    public function setFirstName($firstName)
    {
        
        $this->firstName = $firstName;
        return $this;
    }
    
    /**
     * Gets lastName
     * @return string
     */
    public function getLastName()
    {
        return $this->lastName;
    }
  
    /**
     * Sets lastName
     * @param string $lastName Family name
     * @return $this
     */
    public function setLastName($lastName)
    {
        
        $this->lastName = $lastName;
        return $this;
    }
    
    /**
     * Gets secondaryLastName
     * @return string
     */
    public function getSecondaryLastName()
    {
        return $this->secondaryLastName;
    }
  
    /**
     * Sets secondaryLastName
     * @param string $secondaryLastName An additional last name for a person e.g. Spanish names have two last names
     * @return $this
     */
    public function setSecondaryLastName($secondaryLastName)
    {
        
        $this->secondaryLastName = $secondaryLastName;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Full name of a person. Can be send instead of combination of first name and last name
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
