<?php
/**
 * BookingRentalCar
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightWrite
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BrightWriteâ„¢
 *
 * BrightWrite API
 *
 * OpenAPI spec version: 0.1.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightWrite\Model;

use \ArrayAccess;

/**
 * BookingRentalCar Class Doc Comment
 *
 * @category    Class */
/**
 * @package     BrightWrite
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BookingRentalCar implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BookingRentalCar';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rentalCarBookingId' => 'string',
        'dropOffLocation' => '\BrightWrite\Model\RentalCarLocation',
        'pickUpLocation' => '\BrightWrite\Model\RentalCarLocation',
        'subtotalPrice' => 'double',
        'taxesAndFees' => 'double',
        'totalPrice' => 'double',
        'priceCurrency' => 'string',
        'pickupDateTime' => '\DateTime',
        'dropOffDateTime' => '\DateTime',
        'provider' => 'string',
        'driverCount' => 'int',
        'toddlerSeatCount' => 'int',
        'infantChildSeatCount' => 'int',
        'sIPPCode' => 'string',
        'vehicleType' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'rentalCarBookingId' => 'rentalCarBookingId',
        'dropOffLocation' => 'dropOffLocation',
        'pickUpLocation' => 'pickUpLocation',
        'subtotalPrice' => 'subtotalPrice',
        'taxesAndFees' => 'taxesAndFees',
        'totalPrice' => 'totalPrice',
        'priceCurrency' => 'priceCurrency',
        'pickupDateTime' => 'pickupDateTime',
        'dropOffDateTime' => 'dropOffDateTime',
        'provider' => 'provider',
        'driverCount' => 'driverCount',
        'toddlerSeatCount' => 'toddlerSeatCount',
        'infantChildSeatCount' => 'infantChildSeatCount',
        'sIPPCode' => 'SIPPCode',
        'vehicleType' => 'vehicleType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'rentalCarBookingId' => 'setRentalCarBookingId',
        'dropOffLocation' => 'setDropOffLocation',
        'pickUpLocation' => 'setPickUpLocation',
        'subtotalPrice' => 'setSubtotalPrice',
        'taxesAndFees' => 'setTaxesAndFees',
        'totalPrice' => 'setTotalPrice',
        'priceCurrency' => 'setPriceCurrency',
        'pickupDateTime' => 'setPickupDateTime',
        'dropOffDateTime' => 'setDropOffDateTime',
        'provider' => 'setProvider',
        'driverCount' => 'setDriverCount',
        'toddlerSeatCount' => 'setToddlerSeatCount',
        'infantChildSeatCount' => 'setInfantChildSeatCount',
        'sIPPCode' => 'setSIPPCode',
        'vehicleType' => 'setVehicleType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'rentalCarBookingId' => 'getRentalCarBookingId',
        'dropOffLocation' => 'getDropOffLocation',
        'pickUpLocation' => 'getPickUpLocation',
        'subtotalPrice' => 'getSubtotalPrice',
        'taxesAndFees' => 'getTaxesAndFees',
        'totalPrice' => 'getTotalPrice',
        'priceCurrency' => 'getPriceCurrency',
        'pickupDateTime' => 'getPickupDateTime',
        'dropOffDateTime' => 'getDropOffDateTime',
        'provider' => 'getProvider',
        'driverCount' => 'getDriverCount',
        'toddlerSeatCount' => 'getToddlerSeatCount',
        'infantChildSeatCount' => 'getInfantChildSeatCount',
        'sIPPCode' => 'getSIPPCode',
        'vehicleType' => 'getVehicleType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const VEHICLE_TYPE_CAR = 'car';
    const VEHICLE_TYPE_MOTORHOME = 'motorhome';
    const VEHICLE_TYPE_CAMPERVAN = 'campervan';
    const VEHICLE_TYPE__4X4 = '4x4';
    const VEHICLE_TYPE_MINIBUS = 'minibus';
    const VEHICLE_TYPE_LIGHTTRUCK = 'lighttruck';
    const VEHICLE_TYPE_BUS = 'bus';
    const VEHICLE_TYPE_NOT_CLASSIFIED = 'not_classified';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getVehicleTypeAllowableValues()
    {
        return [
            self::VEHICLE_TYPE_CAR,
            self::VEHICLE_TYPE_MOTORHOME,
            self::VEHICLE_TYPE_CAMPERVAN,
            self::VEHICLE_TYPE__4X4,
            self::VEHICLE_TYPE_MINIBUS,
            self::VEHICLE_TYPE_LIGHTTRUCK,
            self::VEHICLE_TYPE_BUS,
            self::VEHICLE_TYPE_NOT_CLASSIFIED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rentalCarBookingId'] = isset($data['rentalCarBookingId']) ? $data['rentalCarBookingId'] : null;
        $this->container['dropOffLocation'] = isset($data['dropOffLocation']) ? $data['dropOffLocation'] : null;
        $this->container['pickUpLocation'] = isset($data['pickUpLocation']) ? $data['pickUpLocation'] : null;
        $this->container['subtotalPrice'] = isset($data['subtotalPrice']) ? $data['subtotalPrice'] : null;
        $this->container['taxesAndFees'] = isset($data['taxesAndFees']) ? $data['taxesAndFees'] : null;
        $this->container['totalPrice'] = isset($data['totalPrice']) ? $data['totalPrice'] : null;
        $this->container['priceCurrency'] = isset($data['priceCurrency']) ? $data['priceCurrency'] : null;
        $this->container['pickupDateTime'] = isset($data['pickupDateTime']) ? $data['pickupDateTime'] : null;
        $this->container['dropOffDateTime'] = isset($data['dropOffDateTime']) ? $data['dropOffDateTime'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['driverCount'] = isset($data['driverCount']) ? $data['driverCount'] : null;
        $this->container['toddlerSeatCount'] = isset($data['toddlerSeatCount']) ? $data['toddlerSeatCount'] : null;
        $this->container['infantChildSeatCount'] = isset($data['infantChildSeatCount']) ? $data['infantChildSeatCount'] : null;
        $this->container['sIPPCode'] = isset($data['sIPPCode']) ? $data['sIPPCode'] : null;
        $this->container['vehicleType'] = isset($data['vehicleType']) ? $data['vehicleType'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['rentalCarBookingId']) && (strlen($this->container['rentalCarBookingId']) > 128)) {
            $invalid_properties[] = "invalid value for 'rentalCarBookingId', the character length must be smaller than or equal to 128.";
        }

        if ($this->container['dropOffLocation'] === null) {
            $invalid_properties[] = "'dropOffLocation' can't be null";
        }
        if ($this->container['pickUpLocation'] === null) {
            $invalid_properties[] = "'pickUpLocation' can't be null";
        }
        if (!is_null($this->container['priceCurrency']) && (strlen($this->container['priceCurrency']) > 3)) {
            $invalid_properties[] = "invalid value for 'priceCurrency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['priceCurrency']) && (strlen($this->container['priceCurrency']) < 3)) {
            $invalid_properties[] = "invalid value for 'priceCurrency', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['provider']) && (strlen($this->container['provider']) > 128)) {
            $invalid_properties[] = "invalid value for 'provider', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['driverCount']) && ($this->container['driverCount'] > 4)) {
            $invalid_properties[] = "invalid value for 'driverCount', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['driverCount']) && ($this->container['driverCount'] < 0)) {
            $invalid_properties[] = "invalid value for 'driverCount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['toddlerSeatCount']) && ($this->container['toddlerSeatCount'] > 4)) {
            $invalid_properties[] = "invalid value for 'toddlerSeatCount', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['toddlerSeatCount']) && ($this->container['toddlerSeatCount'] < 0)) {
            $invalid_properties[] = "invalid value for 'toddlerSeatCount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['infantChildSeatCount']) && ($this->container['infantChildSeatCount'] > 4)) {
            $invalid_properties[] = "invalid value for 'infantChildSeatCount', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['infantChildSeatCount']) && ($this->container['infantChildSeatCount'] < 0)) {
            $invalid_properties[] = "invalid value for 'infantChildSeatCount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sIPPCode']) && (strlen($this->container['sIPPCode']) > 8)) {
            $invalid_properties[] = "invalid value for 'sIPPCode', the character length must be smaller than or equal to 8.";
        }

        $allowed_values = ["car", "motorhome", "campervan", "4x4", "minibus", "lighttruck", "bus", "not_classified"];
        if (!in_array($this->container['vehicleType'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'vehicleType', must be one of 'car', 'motorhome', 'campervan', '4x4', 'minibus', 'lighttruck', 'bus', 'not_classified'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['rentalCarBookingId']) > 128) {
            return false;
        }
        if ($this->container['dropOffLocation'] === null) {
            return false;
        }
        if ($this->container['pickUpLocation'] === null) {
            return false;
        }
        if (strlen($this->container['priceCurrency']) > 3) {
            return false;
        }
        if (strlen($this->container['priceCurrency']) < 3) {
            return false;
        }
        if (strlen($this->container['provider']) > 128) {
            return false;
        }
        if ($this->container['driverCount'] > 4) {
            return false;
        }
        if ($this->container['driverCount'] < 0) {
            return false;
        }
        if ($this->container['toddlerSeatCount'] > 4) {
            return false;
        }
        if ($this->container['toddlerSeatCount'] < 0) {
            return false;
        }
        if ($this->container['infantChildSeatCount'] > 4) {
            return false;
        }
        if ($this->container['infantChildSeatCount'] < 0) {
            return false;
        }
        if (strlen($this->container['sIPPCode']) > 8) {
            return false;
        }
        $allowed_values = ["car", "motorhome", "campervan", "4x4", "minibus", "lighttruck", "bus", "not_classified"];
        if (!in_array($this->container['vehicleType'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets rentalCarBookingId
     * @return string
     */
    public function getRentalCarBookingId()
    {
        return $this->container['rentalCarBookingId'];
    }

    /**
     * Sets rentalCarBookingId
     * @param string $rentalCarBookingId Internal ID used by distributors to identify the booking. This should match the booking ID BrightWrite collects from the tags on the distributor website. For a booking that has flights and rental cars, the booking IDs would match
     * @return $this
     */
    public function setRentalCarBookingId($rentalCarBookingId)
    {
        if (!is_null($rentalCarBookingId) && (strlen($rentalCarBookingId) > 128)) {
            throw new \InvalidArgumentException('invalid length for $rentalCarBookingId when calling BookingRentalCar., must be smaller than or equal to 128.');
        }

        $this->container['rentalCarBookingId'] = $rentalCarBookingId;

        return $this;
    }

    /**
     * Gets dropOffLocation
     * @return \BrightWrite\Model\RentalCarLocation
     */
    public function getDropOffLocation()
    {
        return $this->container['dropOffLocation'];
    }

    /**
     * Sets dropOffLocation
     * @param \BrightWrite\Model\RentalCarLocation $dropOffLocation
     * @return $this
     */
    public function setDropOffLocation($dropOffLocation)
    {
        $this->container['dropOffLocation'] = $dropOffLocation;

        return $this;
    }

    /**
     * Gets pickUpLocation
     * @return \BrightWrite\Model\RentalCarLocation
     */
    public function getPickUpLocation()
    {
        return $this->container['pickUpLocation'];
    }

    /**
     * Sets pickUpLocation
     * @param \BrightWrite\Model\RentalCarLocation $pickUpLocation
     * @return $this
     */
    public function setPickUpLocation($pickUpLocation)
    {
        $this->container['pickUpLocation'] = $pickUpLocation;

        return $this;
    }

    /**
     * Gets subtotalPrice
     * @return double
     */
    public function getSubtotalPrice()
    {
        return $this->container['subtotalPrice'];
    }

    /**
     * Sets subtotalPrice
     * @param double $subtotalPrice Ticket price without taxes and extra fees
     * @return $this
     */
    public function setSubtotalPrice($subtotalPrice)
    {
        $this->container['subtotalPrice'] = $subtotalPrice;

        return $this;
    }

    /**
     * Gets taxesAndFees
     * @return double
     */
    public function getTaxesAndFees()
    {
        return $this->container['taxesAndFees'];
    }

    /**
     * Sets taxesAndFees
     * @param double $taxesAndFees Total of taxes, fees and other deductions required on top of the subtotalPrice
     * @return $this
     */
    public function setTaxesAndFees($taxesAndFees)
    {
        $this->container['taxesAndFees'] = $taxesAndFees;

        return $this;
    }

    /**
     * Gets totalPrice
     * @return double
     */
    public function getTotalPrice()
    {
        return $this->container['totalPrice'];
    }

    /**
     * Sets totalPrice
     * @param double $totalPrice Ticket price including taxes and extra fees. Should be equal to subtotalPrice + taxesAndFees
     * @return $this
     */
    public function setTotalPrice($totalPrice)
    {
        $this->container['totalPrice'] = $totalPrice;

        return $this;
    }

    /**
     * Gets priceCurrency
     * @return string
     */
    public function getPriceCurrency()
    {
        return $this->container['priceCurrency'];
    }

    /**
     * Sets priceCurrency
     * @param string $priceCurrency Currency in which all pricing info is specified three letters code as described by ISO 4217
     * @return $this
     */
    public function setPriceCurrency($priceCurrency)
    {
        if (!is_null($priceCurrency) && (strlen($priceCurrency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $priceCurrency when calling BookingRentalCar., must be smaller than or equal to 3.');
        }
        if (!is_null($priceCurrency) && (strlen($priceCurrency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $priceCurrency when calling BookingRentalCar., must be bigger than or equal to 3.');
        }

        $this->container['priceCurrency'] = $priceCurrency;

        return $this;
    }

    /**
     * Gets pickupDateTime
     * @return \DateTime
     */
    public function getPickupDateTime()
    {
        return $this->container['pickupDateTime'];
    }

    /**
     * Sets pickupDateTime
     * @param \DateTime $pickupDateTime When the custmer is going to pick up the car
     * @return $this
     */
    public function setPickupDateTime($pickupDateTime)
    {
        $this->container['pickupDateTime'] = $pickupDateTime;

        return $this;
    }

    /**
     * Gets dropOffDateTime
     * @return \DateTime
     */
    public function getDropOffDateTime()
    {
        return $this->container['dropOffDateTime'];
    }

    /**
     * Sets dropOffDateTime
     * @param \DateTime $dropOffDateTime When the custmer is going to return the car
     * @return $this
     */
    public function setDropOffDateTime($dropOffDateTime)
    {
        $this->container['dropOffDateTime'] = $dropOffDateTime;

        return $this;
    }

    /**
     * Gets provider
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     * @param string $provider Service provider, i.e. rental car agency
     * @return $this
     */
    public function setProvider($provider)
    {
        if (!is_null($provider) && (strlen($provider) > 128)) {
            throw new \InvalidArgumentException('invalid length for $provider when calling BookingRentalCar., must be smaller than or equal to 128.');
        }

        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets driverCount
     * @return int
     */
    public function getDriverCount()
    {
        return $this->container['driverCount'];
    }

    /**
     * Sets driverCount
     * @param int $driverCount How many drivers are going to use the car
     * @return $this
     */
    public function setDriverCount($driverCount)
    {

        if (!is_null($driverCount) && ($driverCount > 4)) {
            throw new \InvalidArgumentException('invalid value for $driverCount when calling BookingRentalCar., must be smaller than or equal to 4.');
        }
        if (!is_null($driverCount) && ($driverCount < 0)) {
            throw new \InvalidArgumentException('invalid value for $driverCount when calling BookingRentalCar., must be bigger than or equal to 0.');
        }

        $this->container['driverCount'] = $driverCount;

        return $this;
    }

    /**
     * Gets toddlerSeatCount
     * @return int
     */
    public function getToddlerSeatCount()
    {
        return $this->container['toddlerSeatCount'];
    }

    /**
     * Sets toddlerSeatCount
     * @param int $toddlerSeatCount How many toddler car seats are required
     * @return $this
     */
    public function setToddlerSeatCount($toddlerSeatCount)
    {

        if (!is_null($toddlerSeatCount) && ($toddlerSeatCount > 4)) {
            throw new \InvalidArgumentException('invalid value for $toddlerSeatCount when calling BookingRentalCar., must be smaller than or equal to 4.');
        }
        if (!is_null($toddlerSeatCount) && ($toddlerSeatCount < 0)) {
            throw new \InvalidArgumentException('invalid value for $toddlerSeatCount when calling BookingRentalCar., must be bigger than or equal to 0.');
        }

        $this->container['toddlerSeatCount'] = $toddlerSeatCount;

        return $this;
    }

    /**
     * Gets infantChildSeatCount
     * @return int
     */
    public function getInfantChildSeatCount()
    {
        return $this->container['infantChildSeatCount'];
    }

    /**
     * Sets infantChildSeatCount
     * @param int $infantChildSeatCount How many infant car seats are required
     * @return $this
     */
    public function setInfantChildSeatCount($infantChildSeatCount)
    {

        if (!is_null($infantChildSeatCount) && ($infantChildSeatCount > 4)) {
            throw new \InvalidArgumentException('invalid value for $infantChildSeatCount when calling BookingRentalCar., must be smaller than or equal to 4.');
        }
        if (!is_null($infantChildSeatCount) && ($infantChildSeatCount < 0)) {
            throw new \InvalidArgumentException('invalid value for $infantChildSeatCount when calling BookingRentalCar., must be bigger than or equal to 0.');
        }

        $this->container['infantChildSeatCount'] = $infantChildSeatCount;

        return $this;
    }

    /**
     * Gets sIPPCode
     * @return string
     */
    public function getSIPPCode()
    {
        return $this->container['sIPPCode'];
    }

    /**
     * Sets sIPPCode
     * @param string $sIPPCode SIPP codes are used to summarise the key features of a vehicle
     * @return $this
     */
    public function setSIPPCode($sIPPCode)
    {
        if (!is_null($sIPPCode) && (strlen($sIPPCode) > 8)) {
            throw new \InvalidArgumentException('invalid length for $sIPPCode when calling BookingRentalCar., must be smaller than or equal to 8.');
        }

        $this->container['sIPPCode'] = $sIPPCode;

        return $this;
    }

    /**
     * Gets vehicleType
     * @return string
     */
    public function getVehicleType()
    {
        return $this->container['vehicleType'];
    }

    /**
     * Sets vehicleType
     * @param string $vehicleType
     * @return $this
     */
    public function setVehicleType($vehicleType)
    {
        $allowed_values = array('car', 'motorhome', 'campervan', '4x4', 'minibus', 'lighttruck', 'bus', 'not_classified');
        if (!is_null($vehicleType) && (!in_array($vehicleType, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'vehicleType', must be one of 'car', 'motorhome', 'campervan', '4x4', 'minibus', 'lighttruck', 'bus', 'not_classified'");
        }
        $this->container['vehicleType'] = $vehicleType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this));
    }
}
