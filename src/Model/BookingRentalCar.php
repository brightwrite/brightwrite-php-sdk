<?php
/**
 * BookingRentalCar.
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightWrite\Model;

use ArrayAccess;

/**
 * BookingRentalCar Class Doc Comment.
 *
 * @category    Class
 * @description
 *
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 *
 * @see        https://github.com/swagger-api/swagger-codegen
 */
class BookingRentalCar implements ArrayAccess
{
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    public static $swaggerTypes = [
        'rentalCarBookingId' => 'string',
        'dropOffLocation' => '\BrightWrite\Model\RentalCarLocation',
        'pickUpLocation' => '\BrightWrite\Model\RentalCarLocation',
        'subtotalPrice' => 'double',
        'taxesAndFees' => 'double',
        'totalPrice' => 'double',
        'priceCurrency' => 'string',
        'pickupDateTime' => '\DateTime',
        'dropOffDateTime' => '\DateTime',
        'provider' => 'string',
        'driverCount' => 'int',
        'toddlerSeatCount' => 'int',
        'infantChildSeatCount' => 'int',
        'sIPPCode' => 'string',
        'vehicleType' => 'string',
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name.
     *
     * @var string[]
     */
    public static $attributeMap = [
        'rentalCarBookingId' => 'rentalCarBookingId',
        'dropOffLocation' => 'dropOffLocation',
        'pickUpLocation' => 'pickUpLocation',
        'subtotalPrice' => 'subtotalPrice',
        'taxesAndFees' => 'taxesAndFees',
        'totalPrice' => 'totalPrice',
        'priceCurrency' => 'priceCurrency',
        'pickupDateTime' => 'pickupDateTime',
        'dropOffDateTime' => 'dropOffDateTime',
        'provider' => 'provider',
        'driverCount' => 'driverCount',
        'toddlerSeatCount' => 'toddlerSeatCount',
        'infantChildSeatCount' => 'infantChildSeatCount',
        'sIPPCode' => 'SIPPCode',
        'vehicleType' => 'vehicleType',
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    public static $setters = [
        'rentalCarBookingId' => 'setRentalCarBookingId',
        'dropOffLocation' => 'setDropOffLocation',
        'pickUpLocation' => 'setPickUpLocation',
        'subtotalPrice' => 'setSubtotalPrice',
        'taxesAndFees' => 'setTaxesAndFees',
        'totalPrice' => 'setTotalPrice',
        'priceCurrency' => 'setPriceCurrency',
        'pickupDateTime' => 'setPickupDateTime',
        'dropOffDateTime' => 'setDropOffDateTime',
        'provider' => 'setProvider',
        'driverCount' => 'setDriverCount',
        'toddlerSeatCount' => 'setToddlerSeatCount',
        'infantChildSeatCount' => 'setInfantChildSeatCount',
        'sIPPCode' => 'setSIPPCode',
        'vehicleType' => 'setVehicleType',
    ];

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    public static $getters = [
        'rentalCarBookingId' => 'getRentalCarBookingId',
        'dropOffLocation' => 'getDropOffLocation',
        'pickUpLocation' => 'getPickUpLocation',
        'subtotalPrice' => 'getSubtotalPrice',
        'taxesAndFees' => 'getTaxesAndFees',
        'totalPrice' => 'getTotalPrice',
        'priceCurrency' => 'getPriceCurrency',
        'pickupDateTime' => 'getPickupDateTime',
        'dropOffDateTime' => 'getDropOffDateTime',
        'provider' => 'getProvider',
        'driverCount' => 'getDriverCount',
        'toddlerSeatCount' => 'getToddlerSeatCount',
        'infantChildSeatCount' => 'getInfantChildSeatCount',
        'sIPPCode' => 'getSIPPCode',
        'vehicleType' => 'getVehicleType',
    ];

    public static function getters()
    {
        return self::$getters;
    }

    /**
     * $rentalCarBookingId Internal ID used by distributors to identify the booking. This should match the booking ID BrightWrite collects from the tags on the distributor website. For a booking that has flights and rental cars, the booking IDs would match.
     *
     * @var string
     */
    protected $rentalCarBookingId;

    /**
     * $dropOffLocation.
     *
     * @var \BrightWrite\Model\RentalCarLocation
     */
    protected $dropOffLocation;

    /**
     * $pickUpLocation.
     *
     * @var \BrightWrite\Model\RentalCarLocation
     */
    protected $pickUpLocation;

    /**
     * $subtotalPrice Ticket price without taxes and extra fees.
     *
     * @var float
     */
    protected $subtotalPrice;

    /**
     * $taxesAndFees Total of taxes, fees and other deductions required on top of the subtotalPrice.
     *
     * @var float
     */
    protected $taxesAndFees;

    /**
     * $totalPrice Ticket price including taxes and extra fees. Should be equal to subtotalPrice + taxesAndFees.
     *
     * @var float
     */
    protected $totalPrice;

    /**
     * $priceCurrency Currency in which all pricing info is specified three letters code as described by ISO 4217.
     *
     * @var string
     */
    protected $priceCurrency;

    /**
     * $pickupDateTime When the custmer is going to pick up the car.
     *
     * @var \DateTime
     */
    protected $pickupDateTime;

    /**
     * $dropOffDateTime When the custmer is going to return the car.
     *
     * @var \DateTime
     */
    protected $dropOffDateTime;

    /**
     * $provider Service provider, i.e. rental car agency.
     *
     * @var string
     */
    protected $provider;

    /**
     * $driverCount How many drivers are going to use the car.
     *
     * @var int
     */
    protected $driverCount;

    /**
     * $toddlerSeatCount How many toddler car seats are required.
     *
     * @var int
     */
    protected $toddlerSeatCount;

    /**
     * $infantChildSeatCount How many infant car seats are required.
     *
     * @var int
     */
    protected $infantChildSeatCount;

    /**
     * $sIPPCode SIPP codes are used to summarise the key features of a vehicle.
     *
     * @var string
     */
    protected $sIPPCode;

    /**
     * $vehicleType.
     *
     * @var string
     */
    protected $vehicleType;

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->rentalCarBookingId = $data['rentalCarBookingId'];
            $this->dropOffLocation = $data['dropOffLocation'];
            $this->pickUpLocation = $data['pickUpLocation'];
            $this->subtotalPrice = $data['subtotalPrice'];
            $this->taxesAndFees = $data['taxesAndFees'];
            $this->totalPrice = $data['totalPrice'];
            $this->priceCurrency = $data['priceCurrency'];
            $this->pickupDateTime = $data['pickupDateTime'];
            $this->dropOffDateTime = $data['dropOffDateTime'];
            $this->provider = $data['provider'];
            $this->driverCount = $data['driverCount'];
            $this->toddlerSeatCount = $data['toddlerSeatCount'];
            $this->infantChildSeatCount = $data['infantChildSeatCount'];
            $this->sIPPCode = $data['sIPPCode'];
            $this->vehicleType = $data['vehicleType'];
        }
    }

    /**
     * Gets rentalCarBookingId.
     *
     * @return string
     */
    public function getRentalCarBookingId()
    {
        return $this->rentalCarBookingId;
    }

    /**
     * Sets rentalCarBookingId.
     *
     * @param string $rentalCarBookingId Internal ID used by distributors to identify the booking. This should match the booking ID BrightWrite collects from the tags on the distributor website. For a booking that has flights and rental cars, the booking IDs would match
     *
     * @return $this
     */
    public function setRentalCarBookingId($rentalCarBookingId)
    {
        $this->rentalCarBookingId = $rentalCarBookingId;

        return $this;
    }

    /**
     * Gets dropOffLocation.
     *
     * @return \BrightWrite\Model\RentalCarLocation
     */
    public function getDropOffLocation()
    {
        return $this->dropOffLocation;
    }

    /**
     * Sets dropOffLocation.
     *
     * @param \BrightWrite\Model\RentalCarLocation $dropOffLocation
     *
     * @return $this
     */
    public function setDropOffLocation($dropOffLocation)
    {
        $this->dropOffLocation = $dropOffLocation;

        return $this;
    }

    /**
     * Gets pickUpLocation.
     *
     * @return \BrightWrite\Model\RentalCarLocation
     */
    public function getPickUpLocation()
    {
        return $this->pickUpLocation;
    }

    /**
     * Sets pickUpLocation.
     *
     * @param \BrightWrite\Model\RentalCarLocation $pickUpLocation
     *
     * @return $this
     */
    public function setPickUpLocation($pickUpLocation)
    {
        $this->pickUpLocation = $pickUpLocation;

        return $this;
    }

    /**
     * Gets subtotalPrice.
     *
     * @return float
     */
    public function getSubtotalPrice()
    {
        return $this->subtotalPrice;
    }

    /**
     * Sets subtotalPrice.
     *
     * @param float $subtotalPrice Ticket price without taxes and extra fees
     *
     * @return $this
     */
    public function setSubtotalPrice($subtotalPrice)
    {
        $this->subtotalPrice = $subtotalPrice;

        return $this;
    }

    /**
     * Gets taxesAndFees.
     *
     * @return float
     */
    public function getTaxesAndFees()
    {
        return $this->taxesAndFees;
    }

    /**
     * Sets taxesAndFees.
     *
     * @param float $taxesAndFees Total of taxes, fees and other deductions required on top of the subtotalPrice
     *
     * @return $this
     */
    public function setTaxesAndFees($taxesAndFees)
    {
        $this->taxesAndFees = $taxesAndFees;

        return $this;
    }

    /**
     * Gets totalPrice.
     *
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->totalPrice;
    }

    /**
     * Sets totalPrice.
     *
     * @param float $totalPrice Ticket price including taxes and extra fees. Should be equal to subtotalPrice + taxesAndFees
     *
     * @return $this
     */
    public function setTotalPrice($totalPrice)
    {
        $this->totalPrice = $totalPrice;

        return $this;
    }

    /**
     * Gets priceCurrency.
     *
     * @return string
     */
    public function getPriceCurrency()
    {
        return $this->priceCurrency;
    }

    /**
     * Sets priceCurrency.
     *
     * @param string $priceCurrency Currency in which all pricing info is specified three letters code as described by ISO 4217
     *
     * @return $this
     */
    public function setPriceCurrency($priceCurrency)
    {
        $this->priceCurrency = $priceCurrency;

        return $this;
    }

    /**
     * Gets pickupDateTime.
     *
     * @return \DateTime
     */
    public function getPickupDateTime()
    {
        return $this->pickupDateTime;
    }

    /**
     * Sets pickupDateTime.
     *
     * @param \DateTime $pickupDateTime When the custmer is going to pick up the car
     *
     * @return $this
     */
    public function setPickupDateTime($pickupDateTime)
    {
        $this->pickupDateTime = $pickupDateTime;

        return $this;
    }

    /**
     * Gets dropOffDateTime.
     *
     * @return \DateTime
     */
    public function getDropOffDateTime()
    {
        return $this->dropOffDateTime;
    }

    /**
     * Sets dropOffDateTime.
     *
     * @param \DateTime $dropOffDateTime When the custmer is going to return the car
     *
     * @return $this
     */
    public function setDropOffDateTime($dropOffDateTime)
    {
        $this->dropOffDateTime = $dropOffDateTime;

        return $this;
    }

    /**
     * Gets provider.
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->provider;
    }

    /**
     * Sets provider.
     *
     * @param string $provider Service provider, i.e. rental car agency
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->provider = $provider;

        return $this;
    }

    /**
     * Gets driverCount.
     *
     * @return int
     */
    public function getDriverCount()
    {
        return $this->driverCount;
    }

    /**
     * Sets driverCount.
     *
     * @param int $driverCount How many drivers are going to use the car
     *
     * @return $this
     */
    public function setDriverCount($driverCount)
    {
        $this->driverCount = $driverCount;

        return $this;
    }

    /**
     * Gets toddlerSeatCount.
     *
     * @return int
     */
    public function getToddlerSeatCount()
    {
        return $this->toddlerSeatCount;
    }

    /**
     * Sets toddlerSeatCount.
     *
     * @param int $toddlerSeatCount How many toddler car seats are required
     *
     * @return $this
     */
    public function setToddlerSeatCount($toddlerSeatCount)
    {
        $this->toddlerSeatCount = $toddlerSeatCount;

        return $this;
    }

    /**
     * Gets infantChildSeatCount.
     *
     * @return int
     */
    public function getInfantChildSeatCount()
    {
        return $this->infantChildSeatCount;
    }

    /**
     * Sets infantChildSeatCount.
     *
     * @param int $infantChildSeatCount How many infant car seats are required
     *
     * @return $this
     */
    public function setInfantChildSeatCount($infantChildSeatCount)
    {
        $this->infantChildSeatCount = $infantChildSeatCount;

        return $this;
    }

    /**
     * Gets sIPPCode.
     *
     * @return string
     */
    public function getSIPPCode()
    {
        return $this->sIPPCode;
    }

    /**
     * Sets sIPPCode.
     *
     * @param string $sIPPCode SIPP codes are used to summarise the key features of a vehicle
     *
     * @return $this
     */
    public function setSIPPCode($sIPPCode)
    {
        $this->sIPPCode = $sIPPCode;

        return $this;
    }

    /**
     * Gets vehicleType.
     *
     * @return string
     */
    public function getVehicleType()
    {
        return $this->vehicleType;
    }

    /**
     * Sets vehicleType.
     *
     * @param string $vehicleType
     *
     * @return $this
     */
    public function setVehicleType($vehicleType)
    {
        $allowed_values = ['car', 'motorhome', 'campervan', '4x4', 'minibus', 'lighttruck', 'bus', 'not_classified'];
        if (!in_array($vehicleType, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'vehicleType', must be one of 'car', 'motorhome', 'campervan', '4x4', 'minibus', 'lighttruck', 'bus', 'not_classified'");
        }
        $this->vehicleType = $vehicleType;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\BrightWrite\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
